/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Lorenzo Luccioli
-/
import TestingLowerBounds.Testing.Binary
import TestingLowerBounds.FDiv.Basic
import Mathlib.Analysis.Calculus.Monotone
import Mathlib.Analysis.Convex.Deriv
import TestingLowerBounds.ForMathlib.MonotoneOnTendsto

/-!
# Hockey-stick divergence

## Main definitions

## Main statements

## Notation

## Implementation details

-/

open MeasureTheory


open Set Filter

open Topology

open scoped ENNReal NNReal
#check Monotone.tendsto_rightLim

#check hasDerivWithinAt_iff_tendsto_slope
--put this in the right namespace, or better find the equivalent definition in mathlib
noncomputable
def rightDeriv (f : ‚Ñù ‚Üí ‚Ñù) : ‚Ñù ‚Üí ‚Ñù := fun x ‚Ü¶ derivWithin f (Set.Ioi x) x

lemma rightDeriv_def (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) : rightDeriv f x = derivWithin f (Set.Ioi x) x := rfl

--need some hp on the existence of the limit?
lemma slope_tendsto_rightDeriv (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) : Filter.Tendsto (fun y ‚Ü¶ (f y - f x) / (y - x)) (ùìù[>] x) (ùìù (rightDeriv f x)) := by sorry

example (f : ‚Ñù ‚Üí ‚Ñù)  : rightDeriv f = 0 := by
  ext x
  unfold rightDeriv
  unfold derivWithin
  unfold fderivWithin
  simp

  sorry

namespace Convex

#check convexOn_iff_slope_mono_adjacent

-- TODO: this can be generalized to a set S, where the function is convex, but I still need to figure out what hp to require, since the minimal assumption I think is that there exist a right interval of x that is contained in S (so x itself does not have to be in S), i.e. (x, y) ‚äÜ S, I don't know if. To generalize we will need MonotoneOn.tendsto_nhdsWithin_Ioo_right. However there are dirrerent kinds of sufficient conditions that could be given, for example S open and x in S or x in the interior of S. Discuss this with Remy. Maybe the minimal hp I described is not sufficient, I also need to assure some kind of boundedness of the slope, this should be assured if x is in the interior of S, because then we can take a point to the left of x but stilll inside S and use the monotonicity of the solpe in S, but can we do better?
lemma hasRightDerivAt_of_convexOn {f : ‚Ñù ‚Üí ‚Ñù} (x : ‚Ñù) (hfc : ConvexOn ‚Ñù univ f) :
    DifferentiableWithinAt ‚Ñù f (Set.Ioi x) x := by
  simp_rw [DifferentiableWithinAt, hasFDerivWithinAt_iff_hasDerivWithinAt,
    hasDerivWithinAt_iff_tendsto_slope]
  simp only [mem_Ioi, lt_self_iff_false, not_false_eq_true, diff_singleton_eq_self]
  have h_mono : MonotoneOn (slope f x) (Set.Ioi x) := by
    refine monotoneOn_iff_forall_lt.mpr fun y hy z hz hz' ‚Ü¶ ?_
    simp_rw [slope_def_field]
    exact ConvexOn.secant_mono hfc trivial trivial trivial (Ne.symm (ne_of_lt hy))
      (Ne.symm (ne_of_lt hz)) hz'.le
  refine ‚ü®sInf (slope f x '' Ioi x) ‚Ä¢ ContinuousLinearMap.id _ _, ?_‚ü©
  convert MonotoneOn.tendsto_nhdsWithin_Ioi h_mono ?_
  ¬∑ simp
  ¬∑ refine bddBelow_iff_subset_Ici.mpr ‚ü®(slope f x (x - 1)), fun y ‚ü®z, hz, hz'‚ü© ‚Ü¶ ?_‚ü©
    simp_rw [mem_Ici, ‚Üê hz', slope_def_field]
    refine ConvexOn.secant_mono hfc trivial trivial trivial (pred_ne_self x)
      (Ne.symm (ne_of_lt hz)) (by linarith [mem_Ioi.mp hz])

lemma hasLeftDerivAt_of_convexOn {f : ‚Ñù ‚Üí ‚Ñù} (x : ‚Ñù) (hfc : ConvexOn ‚Ñù univ f) :
    DifferentiableWithinAt ‚Ñù f (Set.Iio x) x := by
  simp_rw [DifferentiableWithinAt, hasFDerivWithinAt_iff_hasDerivWithinAt,
    hasDerivWithinAt_iff_tendsto_slope]
  simp only [mem_Iio, lt_self_iff_false, not_false_eq_true, diff_singleton_eq_self]
  have h_mono : MonotoneOn (slope f x) (Set.Iio x) := by
    refine monotoneOn_iff_forall_lt.mpr fun y hy z hz hz' ‚Ü¶ ?_
    simp_rw [slope_def_field]
    exact ConvexOn.secant_mono hfc trivial trivial trivial (Ne.symm (ne_of_gt hy))
      (Ne.symm (ne_of_gt hz)) hz'.le
  refine ‚ü®sSup (slope f x '' Iio x) ‚Ä¢ ContinuousLinearMap.id _ _, ?_‚ü©
  convert MonotoneOn.tendsto_nhdsWithin_Iio h_mono ?_
  ¬∑ simp
  ¬∑ refine bddAbove_iff_subset_Iic.mpr ‚ü®(slope f x (x + 1)), fun y ‚ü®z, hz, hz'‚ü© ‚Ü¶ ?_‚ü©
    simp_rw [mem_Iic, ‚Üê hz', slope_def_field]
    refine ConvexOn.secant_mono hfc trivial trivial trivial (Ne.symm (ne_of_gt hz))
      (succ_ne_self x) (by linarith [mem_Iio.mp hz])

--we want some version of ConvexOn.monotoneOn_derivWithin that works for the right derivative, we cannot directly use this because here the set S is fixed, while in our case it depends on x
--but first we need to show that the function is actually differentiable. maybe for now I prove this lemma with this hp and then we prove the differentiability and remove the hp
#check ConvexOn.monotoneOn_derivWithin
#check ConvexOn.right_deriv_le_slope
#check ConvexOn.slope_le_left_deriv
-- lemma monotoneOn_derivWithin (hfc : ConvexOn ‚Ñù S f) (hfd : DifferentiableOn ‚Ñù f S) :
--     MonotoneOn (derivWithin f S) S := by
--   intro x hx y hy hxy
--   rcases eq_or_lt_of_le hxy with rfl | hxy'
--   ¬∑ rfl
--   exact (hfc.derivWithin_le_slope hx hy hxy' (hfd x hx)).trans
--     (hfc.slope_le_derivWithin hx hy hxy' (hfd y hy))

lemma monotoneOn_rightDeriv {S : Set ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} (hfc : ConvexOn ‚Ñù S f)
    (hfrd : ‚àÄ x ‚àà S, DifferentiableWithinAt ‚Ñù f (Set.Ioi x) x)
    (hfld : ‚àÄ x ‚àà S, DifferentiableWithinAt ‚Ñù f (Set.Iio x) x) :
    MonotoneOn (rightDeriv f) S := by
  intro x hx y hy hxy
  rcases eq_or_lt_of_le hxy with rfl | hxy'
  ¬∑ rfl
  unfold rightDeriv
  have h1 := ConvexOn.right_deriv_le_slope hfc hx hy hxy' (hfrd x hx)
  have h2 := ConvexOn.slope_le_left_deriv hfc hx hy hxy' (hfld y hy)
  have h3 := h1.trans h2
  refine h3.trans ?_




  sorry

  -- exact (hfc.rightDeriv_le_slope hx hy hxy' (hfd x hx)).trans (hfc.slope_le_rightDeriv hx hy hxy' (hfd y hy))


lemma rightDeriv_mono (f : ‚Ñù ‚Üí ‚Ñù) (h : ConvexOn ‚Ñù Set.univ f) (x y : ‚Ñù) (hxy : x ‚â§ y) : rightDeriv f x ‚â§ rightDeriv f y := by

  sorry


#check convexOn_iff_slope_mono_adjacent
#check ConvexOn.right_deriv_le_slope

noncomputable
def _root_.StieltjesFunction.rightDeriv_of_convex (f : ‚Ñù ‚Üí ‚Ñù) (hf : ConvexOn ‚Ñù Set.univ f) : StieltjesFunction where
  toFun := rightDeriv f
  mono' _ _ := by
    -- refine ConvexOn.monotoneOn_derivWithin ?_ ?_
    sorry
  right_continuous' _ := by sorry


end Convex


namespace ProbabilityTheory

variable {ùí≥ ùí≥' : Type*} {mùí≥ : MeasurableSpace ùí≥} {mùí≥' : MeasurableSpace ùí≥'}
  {Œº ŒΩ : Measure ùí≥} {p : ‚Ñù‚â•0‚àû}

--we still have to figure out if the right condition is Œ≥ < 1 or Œ≥ ‚â§ 1
noncomputable
def hockeyStickFun (Œ≥ x : ‚Ñù) : ‚Ñù := if Œ≥ < 1 then max 0 (Œ≥ - x) else max 0 (x - Œ≥)

noncomputable
def eGamma (Œ≥ : ‚Ñù) (Œº ŒΩ : Measure ùí≥) : EReal := fDiv (hockeyStickFun Œ≥) Œº ŒΩ
  -- right_continuous' _ := sorry

noncomputable
def curvatureMeasure (f : ‚Ñù ‚Üí ‚Ñù) {s : Set ‚Ñù} (hf : ConvexOn ‚Ñù s f) : Measure s := sorry
-- (StieltjesFunction.rightDeriv f hf).measure




#check Monotone.ae_hasDerivAt --this should solve the problem in the proof where we were not sure how to proceed
lemma generalized_taylor (f : ‚Ñù ‚Üí ‚Ñù) {s : Set ‚Ñù} (hf : ConvexOn ‚Ñù s f) {a b : ‚Ñù} (ha : a ‚àà s) (hb : b ‚àà s) :
    f b - f a - (rightDeriv f a) * (b - a)  = ‚à´ x, |b - x| ‚àÇ(curvatureMeasure f hf) := --the statement is wrong, the integral should go only from min a b to max a b, but I need to understand how to write this, since now the domain of the measure is s, not ‚Ñù
  sorry


lemma fun_eq_interal_hockeyStickFun_curvatureMeasure (f : ‚Ñù ‚Üí ‚Ñù) (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hf_one : f 1 = 0) (hfderiv_one : _root_.rightDeriv f 1 = 0) :
    f = fun x ‚Ü¶ ‚à´ y, hockeyStickFun y x ‚àÇ(curvatureMeasure f hf_cvx) :=
  sorry

/-things needed:
- the right derivative of a function
  - the right derivative of a convex function at a point is greater than its left derivative
- the fact that if f is convex its right derivative is a stieltjes function
- the stieltjes file only handles functions ‚Ñù ‚Üí ‚Ñù, do we do the same or do we want to generalize to functions on subsets of ‚Ñù? for example we may want to only consider functions on (0,‚àû), as they do in the paper Phi-divergences, sufficiency..., moreover the functions we have for the f divergences are convex only on half the real line, so it may be necessary to generalize the stieltjes file. solution: do everything on ‚Ñù, then we can show that for every convex function on (0,‚àû) we can find a convex function on ‚Ñù that coincides with the original on (0,‚àû) just by extending it to a linear function with slope equal to the right derivative at 0 on the negavites
- how to handle the integral in the generalized taylor theorem, since the measure is defined on a subset of ‚Ñù, not on all of ‚Ñù and I need to further restrict that to the interval [min a b, max a b]
-/


end ProbabilityTheory
