/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Lorenzo Luccioli
-/
-- theorem foo (n : Nat) : 0 ‚â§ n := by exact? -- trick to make exact? work TODO : erase this when we are done
-- import LeanCopilot

import TestingLowerBounds.FDiv.Basic
import TestingLowerBounds.FDiv.CondFDiv
import Mathlib.Analysis.Convex.SpecificFunctions.Pow

/-!
# Helliger divergence

## Main definitions

* `FooBar`

## Main statements

* `fooBar_unique`

## Notation



## Implementation details

-/

open Real MeasureTheory Filter

open scoped ENNReal NNReal Topology

namespace ProbabilityTheory

variable {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} {Œº ŒΩ : Measure Œ±} {a : ‚Ñù}

-- todo: rename and move.
lemma integral_rpow_rnDeriv (ha_pos : 0 < a) (ha : a ‚â† 1) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ = ‚à´ x, ((‚àÇŒΩ/‚àÇŒº) x).toReal ^ (1 - a) ‚àÇŒº := by
  let p := ‚àÇŒº/‚àÇ(Œº + ŒΩ)
  let q := ‚àÇŒΩ/‚àÇ(Œº + ŒΩ)
  calc ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ
    = ‚à´ x, ((p/q) x).toReal ^ a ‚àÇŒΩ := by
        refine integral_congr_ae ?_
        filter_upwards [Measure.rnDeriv_eq_div Œº ŒΩ] with x hx
        simp only [hx, Pi.div_apply, p, q]
  _ = ‚à´ x, (q x).toReal * ((p/q) x).toReal ^ a ‚àÇ(Œº + ŒΩ) := by
        rw [‚Üê integral_rnDeriv_smul (_ : ŒΩ ‚â™ Œº + ŒΩ)]
        ¬∑ simp
        ¬∑ rw [add_comm]
          exact Measure.AbsolutelyContinuous.rfl.add_right Œº
  _ = ‚à´ x, (p x).toReal * ((q/p) x).toReal ^ (1 - a) ‚àÇ(Œº + ŒΩ) := by
        refine integral_congr_ae ?_
        filter_upwards [Measure.rnDeriv_lt_top Œº (Œº + ŒΩ), Measure.rnDeriv_lt_top ŒΩ (Œº + ŒΩ)]
          with x hp_top hq_top
        by_cases hp : p x = 0
        ¬∑ simp [hp, ha_pos.ne']
        by_cases hq : q x = 0
        ¬∑ simp only [hq, ENNReal.zero_toReal, Pi.div_apply, zero_mul, ENNReal.zero_div,
            zero_eq_mul, le_refl]
          refine Or.inr ?_
          rw [zero_rpow]
          rwa [ne_eq, sub_eq_zero, Eq.comm]
        simp only [Pi.div_apply, ENNReal.toReal_div, div_eq_mul_inv, ENNReal.toReal_mul,
          mul_rpow ENNReal.toReal_nonneg (inv_nonneg.mpr ENNReal.toReal_nonneg), ENNReal.toReal_inv,
          inv_rpow ENNReal.toReal_nonneg, ‚Üê rpow_neg ENNReal.toReal_nonneg, neg_sub]
        rw [mul_comm, mul_assoc, mul_comm _ ((p x).toReal ^ (a - 1)), ‚Üê mul_assoc (p x).toReal]
        congr
        ¬∑ have : a = 1 + (a - 1) := by abel
          conv_lhs => rw [this]
          rw [rpow_add, rpow_one]
          rw [ENNReal.toReal_pos_iff]
          exact ‚ü®zero_le'.lt_of_ne' hp, hp_top‚ü©
        ¬∑ rw [mul_comm, rpow_sub, rpow_one, rpow_neg ENNReal.toReal_nonneg, div_eq_mul_inv]
          rw [ENNReal.toReal_pos_iff]
          exact ‚ü®zero_le'.lt_of_ne' hq, hq_top‚ü©
  _ = ‚à´ x, ((q/p) x).toReal ^ (1 - a) ‚àÇŒº := by
        rw [‚Üê integral_rnDeriv_smul (_ : Œº ‚â™ Œº + ŒΩ)]
        ¬∑ simp
        ¬∑ exact Measure.AbsolutelyContinuous.rfl.add_right ŒΩ
  _ = ‚à´ x, ((‚àÇŒΩ/‚àÇŒº) x).toReal ^ (1 - a) ‚àÇŒº := by
        refine integral_congr_ae ?_
        filter_upwards [Measure.rnDeriv_eq_div ŒΩ Œº] with x hx
        rw [add_comm] at hx
        simp only [hx, Pi.div_apply, p, q]

lemma integrable_rpow_rnDeriv_iff [SigmaFinite ŒΩ] [SigmaFinite Œº] (hŒºŒΩ : Œº ‚â™ ŒΩ)
    {a : ‚Ñù} (ha : 0 < a) :
    Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ (1 + a)) ŒΩ := by
  rw [‚Üê integrable_rnDeriv_smul_iff hŒºŒΩ]
  refine integrable_congr ?_
  filter_upwards [Measure.rnDeriv_ne_top Œº ŒΩ] with x hx
  simp only [smul_eq_mul]
  by_cases h_zero : Œº.rnDeriv ŒΩ x = 0
  ¬∑ simp only [h_zero, ENNReal.zero_toReal, zero_mul]
    rw [zero_rpow]
    linarith
  ¬∑ rw [rpow_add (ENNReal.toReal_pos h_zero hx), rpow_one]

section HellingerFun

/--Hellinger function, defined as `x ‚Ü¶ (a - 1)‚Åª¬π * (x ^ a - 1)` for `a : ‚Ñù`.-/
noncomputable
def hellingerFun (a : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù := fun x ‚Ü¶ (a - 1)‚Åª¬π * (x ^ a - 1)

lemma hellingerFun_one : hellingerFun 1 = fun x ‚Ü¶ 0 := by
  ext x
  simp [hellingerFun]

lemma continuous_rpow_const (ha_pos : 0 < a) : Continuous fun (x : ‚Ñù) ‚Ü¶ x ^ a := by
  rw [continuous_iff_continuousAt]
  exact fun _ ‚Ü¶ continuousAt_rpow_const _ _ (Or.inr ha_pos)

lemma continuous_hellingerFun (ha_pos : 0 < a) : Continuous (hellingerFun a) :=
  continuous_const.mul ((continuous_rpow_const ha_pos).sub continuous_const)

lemma stronglyMeasurable_hellingerFun (ha_pos : 0 < a) : StronglyMeasurable (hellingerFun a) :=
  (continuous_hellingerFun ha_pos).stronglyMeasurable

@[simp]
lemma hellingerFun_one_eq_zero : hellingerFun a 1 = 0 := by simp [hellingerFun]

lemma convexOn_hellingerFun (ha_pos : 0 < a) : ConvexOn ‚Ñù (Set.Ici 0) (hellingerFun a) := by
  cases le_total a 1 with
  | inl ha =>
    have : hellingerFun a = - (fun x ‚Ü¶ (1 - a)‚Åª¬π ‚Ä¢ (x ^ a - 1)) := by
      ext x
      simp only [Pi.neg_apply]
      rw [smul_eq_mul, ‚Üê neg_mul, neg_inv, neg_sub, hellingerFun]
    rw [this]
    refine ConcaveOn.neg ?_
    exact ((Real.concaveOn_rpow ha_pos.le ha).sub (convexOn_const _ (convex_Ici 0))).smul
      (by simp [ha])
  | inr ha =>
    have h := convexOn_rpow ha
    unfold hellingerFun
    simp_rw [‚Üê smul_eq_mul]
    refine ConvexOn.smul (by simp [ha]) ?_
    exact h.sub (concaveOn_const _ (convex_Ici 0))

lemma tendsto_hellingerFun_div_atTop_of_one_lt (ha : 1 < a) :
    Tendsto (fun x ‚Ü¶ hellingerFun a x / x) atTop atTop := by
  sorry

lemma tendsto_hellingerFun_div_atTop_of_lt_one (ha : a < 1) :
    Tendsto (fun x ‚Ü¶ hellingerFun a x / x) atTop (ùìù 0) := by
  sorry

lemma derivAtTop_hellingerFun_of_one_lt (ha : 1 < a) : derivAtTop (hellingerFun a) = ‚ä§ := by
  rw [derivAtTop, if_pos]
  exact tendsto_hellingerFun_div_atTop_of_one_lt ha

lemma derivAtTop_hellingerFun_of_lt_one (ha : a < 1) :
    derivAtTop (hellingerFun a) = 0 :=
  derivAtTop_of_tendsto (tendsto_hellingerFun_div_atTop_of_lt_one ha)

lemma derivAtTop_hellingerFun_of_le_one (ha : a ‚â§ 1) :
    derivAtTop (hellingerFun a) = 0 := by
  by_cases ha_eq : a = 1
  ¬∑ exact ha_eq.symm ‚ñ∏ hellingerFun_one.symm ‚ñ∏ derivAtTop_const 0
  ¬∑ exact derivAtTop_hellingerFun_of_lt_one <| lt_of_le_of_ne ha ha_eq

lemma integrable_hellingerFun_iff_integrable_rpow (ha : a ‚â† 1) [IsFiniteMeasure ŒΩ] :
    Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
      ‚Üî Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ := by
  simp_rw [hellingerFun]
  rw [integrable_const_mul_iff]
  swap; ¬∑ simp [sub_eq_zero, ha]
  simp_rw [sub_eq_add_neg, integrable_add_const_iff]

lemma integrable_hellingerFun_rnDeriv_of_le_one (ha_pos : 0 < a) (ha : a ‚â§ 1) [IsFiniteMeasure Œº]
    [IsFiniteMeasure ŒΩ] :
    Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  refine integrable_f_rnDeriv_of_derivAtTop_ne_top Œº ŒΩ ?_ ?_ ?_
  ¬∑ exact stronglyMeasurable_hellingerFun ha_pos
  ¬∑ exact convexOn_hellingerFun ha_pos
  ¬∑ rw [derivAtTop_hellingerFun_of_le_one ha]
    exact EReal.zero_ne_top

lemma integrable_rpow_rnDeriv_of_lt_one (ha_pos : 0 < a) (ha : a < 1) [IsFiniteMeasure Œº]
    [IsFiniteMeasure ŒΩ] :
    Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a) ŒΩ := by
  rw [‚Üê integrable_hellingerFun_iff_integrable_rpow ha.ne]
  exact integrable_hellingerFun_rnDeriv_of_le_one ha_pos ha.le

end HellingerFun

/-- Hellinger divergence of order `a`. Meaningful for `a ‚àà (0, 1) ‚à™ (1, ‚àû)`. -/
noncomputable def hellingerDiv (a : ‚Ñù) (Œº ŒΩ : Measure Œ±) : EReal := fDiv (hellingerFun a) Œº ŒΩ

/--Note that the correct definition of Hellinger divergence at `a = 1` would be to be equal to the
KL divergence, not the f divergence with `f = fun x ‚Ü¶ 0`. -/
@[simp] lemma hellingerDiv_one (Œº ŒΩ : Measure Œ±) : hellingerDiv 1 Œº ŒΩ = 0 := by
  rw [hellingerDiv, hellingerFun_one, fDiv_zero]

section HellingerEq

/--If `a ‚â§ 1` use `hellingerDiv_eq_integral_of_integrable_of_le_one` or
`hellingerDiv_eq_integral_of_le_one`, as they have fewer hypotheses.-/
lemma hellingerDiv_eq_integral_of_integrable_of_ac
    (h_int : Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) (h_ac : 1 < a ‚Üí Œº ‚â™ ŒΩ) :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ := by
  rw [hellingerDiv, fDiv_of_integrable h_int]
  rcases (lt_or_ge 1 a) with ha | ha
  ¬∑ rw [Measure.singularPart_eq_zero_of_ac <| h_ac ha]
    norm_num
  ¬∑ rw [derivAtTop_hellingerFun_of_le_one ha]
    norm_num

lemma hellingerDiv_eq_integral_of_integrable_of_le_one (ha : a ‚â§ 1)
    (h_int : Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ :=
  hellingerDiv_eq_integral_of_integrable_of_ac h_int ha.not_lt.elim

lemma hellingerDiv_eq_integral_of_le_one (ha_pos : 0 < a) (ha : a ‚â§ 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ :=
  hellingerDiv_eq_integral_of_integrable_of_ac
    (integrable_hellingerFun_rnDeriv_of_le_one ha_pos ha) ha.not_lt.elim

lemma hellingerDiv_of_not_integrable
    (h : ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    hellingerDiv a Œº ŒΩ = ‚ä§ := fDiv_of_not_integrable h

lemma hellingerDiv_of_one_lt_not_ac (ha : 1 < a) (h_ac : ¬¨ Œº ‚â™ ŒΩ) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚ä§ := fDiv_of_not_ac (derivAtTop_hellingerFun_of_one_lt ha) h_ac

lemma hellingerDiv_eq_top_iff (a : ‚Ñù) (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚à® (1 < a ‚àß ¬¨ Œº ‚â™ ŒΩ) := by
  constructor
  ¬∑ contrapose!
    rintro ‚ü®h_int, h_ac‚ü©
    rw [hellingerDiv_eq_integral_of_integrable_of_ac h_int h_ac]
    exact EReal.coe_ne_top _
  ¬∑ rintro (h | ‚ü®ha, h_ac‚ü©)
    ¬∑ exact hellingerDiv_of_not_integrable h
    ¬∑ exact hellingerDiv_of_one_lt_not_ac ha h_ac

lemma hellingerDiv_ne_top_iff (a : ‚Ñù) (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§
      ‚Üî Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚àß (1 < a ‚Üí Œº ‚â™ ŒΩ) := by
  rw [ne_eq, hellingerDiv_eq_top_iff]
  push_neg
  rfl

lemma hellingerDiv_eq_top_iff_of_one_lt (ha : 1 < a) (Œº ŒΩ : Measure Œ±)
    [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚à® ¬¨ Œº ‚â™ ŒΩ := by
  rw [hellingerDiv_eq_top_iff, and_iff_right ha]

lemma hellingerDiv_ne_top_iff_of_one_lt (ha : 1 < a) (Œº ŒΩ : Measure Œ±)
    [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§
      ‚Üî Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚àß Œº ‚â™ ŒΩ := by
  rw [ne_eq, hellingerDiv_eq_top_iff_of_one_lt ha]
  push_neg
  rfl

lemma hellingerDiv_eq_top_iff_of_le_one (ha : a ‚â§ 1) (Œº ŒΩ : Measure Œ±) :
    hellingerDiv a Œº ŒΩ = ‚ä§ ‚Üî ¬¨ Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  refine ‚ü®?_, fun h ‚Ü¶ hellingerDiv_of_not_integrable h‚ü©
  contrapose!
  rintro h_int
  rw [hellingerDiv_eq_integral_of_integrable_of_le_one ha h_int]
  exact EReal.coe_ne_top _

lemma hellingerDiv_ne_top_iff_of_le_one (ha : a ‚â§ 1) (Œº ŒΩ : Measure Œ±) :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§ ‚Üî Integrable (fun x ‚Ü¶ hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  rw [ne_eq, hellingerDiv_eq_top_iff_of_le_one ha, not_not]

lemma hellingerDiv_ne_top_of_le_one (ha_pos : 0 < a) (ha : a ‚â§ 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â† ‚ä§ := by
  rw [hellingerDiv_ne_top_iff_of_le_one ha]
  exact integrable_hellingerFun_rnDeriv_of_le_one ha_pos ha

lemma hellingerDiv_eq_integral_of_ne_top (ha_ne_one : a ‚â† 1) [IsFiniteMeasure Œº] [SigmaFinite ŒΩ]
    (h : hellingerDiv a Œº ŒΩ ‚â† ‚ä§) :
    hellingerDiv a Œº ŒΩ = ‚à´ x, hellingerFun a ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ := by
  rw [hellingerDiv, fDiv_of_ne_top h]
  cases lt_or_gt_of_ne ha_ne_one with
  | inl ha_lt => rw [derivAtTop_hellingerFun_of_lt_one ha_lt, zero_mul, add_zero]
  | inr ha_gt =>
    rw [hellingerDiv_ne_top_iff_of_one_lt ha_gt] at h
    rw [Measure.singularPart_eq_zero_of_ac h.2]
    simp

lemma hellingerDiv_eq_integral_of_ne_top' (ha_ne_one : a ‚â† 1) [IsFiniteMeasure Œº]
    [IsFiniteMeasure ŒΩ] (h : hellingerDiv a Œº ŒΩ ‚â† ‚ä§) :
    hellingerDiv a Œº ŒΩ = (a - 1)‚Åª¬π * ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ - (a - 1)‚Åª¬π * ŒΩ Set.univ := by
  rw [hellingerDiv_eq_integral_of_ne_top ha_ne_one h]
  simp_rw [hellingerFun, integral_mul_left]
  rw [integral_sub _ (integrable_const _),
    integral_const, smul_eq_mul, mul_one, mul_sub, EReal.coe_sub, EReal.coe_mul, EReal.coe_mul,
    EReal.coe_ennreal_toReal (measure_ne_top _ _)]
  rw [‚Üê integrable_hellingerFun_iff_integrable_rpow ha_ne_one]
  by_contra h_not_int
  exact h (hellingerDiv_of_not_integrable h_not_int)

lemma hellingerDiv_eq_integral_of_ne_top'' (ha_ne_one : a ‚â† 1) [IsFiniteMeasure Œº]
    [IsProbabilityMeasure ŒΩ] (h : hellingerDiv a Œº ŒΩ ‚â† ‚ä§) :
    hellingerDiv a Œº ŒΩ = (a - 1)‚Åª¬π * ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ - (a - 1)‚Åª¬π := by
  rw [hellingerDiv_eq_integral_of_ne_top' ha_ne_one h]
  simp

lemma hellingerDiv_eq_integral_of_lt_one' (ha_pos : 0 < a) (ha : a < 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ = (a - 1)‚Åª¬π * ‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ^ a ‚àÇŒΩ - (a - 1)‚Åª¬π * ŒΩ Set.univ :=
  hellingerDiv_eq_integral_of_ne_top' ha.ne (hellingerDiv_ne_top_of_le_one ha_pos ha.le Œº ŒΩ)

end HellingerEq

--Maybe we could write something like this for the conditional case? Would it be useful?
lemma hellingerDiv_le_of_lt_one (ha_pos : 0 < a) (ha : a < 1) (Œº ŒΩ : Measure Œ±)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    hellingerDiv a Œº ŒΩ ‚â§ (1 - a)‚Åª¬π * ŒΩ Set.univ := by
  rw [hellingerDiv]
  refine (fDiv_le_zero_add_top (stronglyMeasurable_hellingerFun ha_pos)
    (convexOn_hellingerFun ha_pos)).trans_eq ?_
  rw [derivAtTop_hellingerFun_of_lt_one ha, hellingerFun, zero_rpow ha_pos.ne']
  simp only [zero_sub, mul_neg, mul_one, zero_mul, add_zero]
  rw [neg_inv, neg_sub]

lemma hellingerDiv_symm' (ha_pos : 0 < a) (ha : a < 1) (h_eq : Œº Set.univ = ŒΩ Set.univ)
    [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ] :
    (1 - a) * hellingerDiv a Œº ŒΩ = a * hellingerDiv (1 - a) ŒΩ Œº := by
  rw [hellingerDiv_eq_integral_of_lt_one' ha_pos ha, hellingerDiv_eq_integral_of_lt_one']
  rotate_left
  ¬∑ linarith
  ¬∑ linarith
  simp only [sub_sub_cancel_left]
  simp_rw [‚Üê EReal.coe_ennreal_toReal (measure_ne_top _ _), h_eq]
  norm_cast
  simp_rw [mul_sub, ‚Üê mul_assoc]
  have : (1 - a) * (a - 1)‚Åª¬π = a * (-a)‚Åª¬π := by
    rw [‚Üê neg_neg (1 - a), neg_sub, neg_mul, mul_inv_cancel, inv_neg, mul_comm, neg_mul,
      inv_mul_cancel ha_pos.ne']
    linarith
  rw [integral_rpow_rnDeriv ha_pos ha.ne]
  congr

lemma hellingerDiv_symm (ha_pos : 0 < a) (ha : a < 1)
    [IsProbabilityMeasure Œº] [IsProbabilityMeasure ŒΩ] :
    (1 - a) * hellingerDiv a Œº ŒΩ = a * hellingerDiv (1 - a) ŒΩ Œº :=
  hellingerDiv_symm' ha_pos ha (by simp)

lemma hellingerDiv_nonneg (ha_pos : 0 < a) (Œº ŒΩ : Measure Œ±)
    [IsProbabilityMeasure Œº] [IsProbabilityMeasure ŒΩ] :
    0 ‚â§ hellingerDiv a Œº ŒΩ :=
  fDiv_nonneg (convexOn_hellingerFun ha_pos) (continuous_hellingerFun ha_pos).continuousOn
    hellingerFun_one_eq_zero

section Conditional

variable {Œ≤ : Type*} {mŒ≤ : MeasurableSpace Œ≤} {Œ∫ Œ∑ : kernel Œ± Œ≤}

lemma hellingerDiv_ae_ne_top_iff (a : ‚Ñù) (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    (‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß (1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x)) := by
  simp_rw [hellingerDiv_ne_top_iff, eventually_and, eventually_all]

lemma hellingerDiv_ae_ne_top_iff_of_le_one (ha : a ‚â§ 1) (Œ∫ Œ∑ : kernel Œ± Œ≤) :
    (‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)) := by
  simp_rw [hellingerDiv_ne_top_iff_of_le_one ha]

/--Use this version only for the case `1 < a` or when one of the kernels is not finite, otherwise
use `integrable_hellingerDiv_iff_of_lt_one`, as it is strictly more general.-/
lemma integrable_hellingerDiv_iff
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : 1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, Œ∫ x ‚â™ Œ∑ x) :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ‚àÇŒ∑ x) Œº := by
  apply integrable_congr
  filter_upwards [h_int, eventually_all.mpr h_ac] with x hx_int hx_ac
  rw [hellingerDiv_eq_integral_of_integrable_of_ac hx_int hx_ac, EReal.toReal_coe]

lemma integrable_hellingerDiv_iff_of_le_one (ha_pos : 0 < a) (ha : a ‚â§ 1)
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ‚àÇŒ∑ x) Œº := by
  refine integrable_congr (eventually_of_forall fun x ‚Ü¶ ?_)
  simp_rw [hellingerDiv_eq_integral_of_le_one ha_pos ha, EReal.toReal_coe]

lemma integrable_hellingerDiv_iff' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : 1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, Œ∫ x ‚â™ Œ∑ x) :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  have h_fin : ‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§ := by
    filter_upwards [h_int, eventually_all.mpr h_ac] with x hx_int hx_ac
    rcases lt_or_gt_of_ne ha_ne_one with h_lt | h_gt
    ¬∑ exact hellingerDiv_ne_top_of_le_one ha_pos h_lt.le _ _
    ¬∑ exact hellingerDiv_ne_top_iff_of_one_lt h_gt _ _ |>.mpr ‚ü®hx_int, hx_ac h_gt‚ü©
  have h_eq_eq : ‚àÄ·µê x ‚àÇŒº, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal =
      (a - 1)‚Åª¬π * ((‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) - ((Œ∑ x) Set.univ).toReal) := by
    filter_upwards [h_fin] with x hx
    rw [hellingerDiv_eq_integral_of_ne_top' ha_ne_one hx, ‚Üê EReal.coe_mul,
      EReal.toReal_sub (EReal.coe_ne_top _) (EReal.coe_ne_bot _), EReal.toReal_coe,
      EReal.toReal_mul, EReal.toReal_coe, EReal.toReal_coe_ennreal, mul_sub]
    ¬∑ refine (EReal.mul_eq_top _ _).mp.mt ?_
      push_neg
      exact ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_nonneg _, ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_ne_bot _,
        ‚ü®by simp only [EReal.coe_ne_top, IsEmpty.forall_iff],
        fun _ ‚Ü¶ EReal.coe_ennreal_eq_top_iff.mp.mt (measure_ne_top _ _)‚ü©‚ü©‚ü©
    ¬∑ refine (EReal.mul_eq_bot _ _).mp.mt ?_
      push_neg
      exact ‚ü®by simp only [EReal.coe_ne_bot, IsEmpty.forall_iff],
        ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_ne_bot _, ‚ü®fun _ ‚Ü¶ EReal.coe_ennreal_nonneg _,
        fun _ ‚Ü¶ EReal.coe_ennreal_eq_top_iff.mp.mt (measure_ne_top _ _)‚ü©‚ü©‚ü©
  rw [integrable_congr h_eq_eq, integrable_const_mul_iff (isUnit_iff_ne_zero.mpr <| (ne_eq _ _).mpr
    <| inv_eq_zero.mp.mt <| sub_ne_zero_of_ne ha_ne_one)]
  obtain ‚ü®C, ‚ü®hC_finite, hC‚ü©‚ü© := IsFiniteKernel.exists_univ_le (Œ∫ := Œ∑)
  refine integrable_add_iff_integrable_left <| (integrable_const C.toReal).mono' ?_ ?_
  ¬∑ exact kernel.measurable_coe Œ∑ MeasurableSet.univ |>.ennreal_toReal.neg.aestronglyMeasurable
  refine eventually_of_forall (fun x ‚Ü¶ ?_)
  rw [norm_eq_abs, abs_neg, abs_eq_self.mpr ENNReal.toReal_nonneg, ENNReal.toReal_le_toReal
    (measure_ne_top _ _) (lt_top_iff_ne_top.mp hC_finite)]
  exact hC x

lemma integrable_hellingerDiv_iff'_of_lt_one (ha_pos : 0 < a) (ha : a < 1) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº :=
  integrable_hellingerDiv_iff' ha_pos ha.ne (eventually_of_forall
    (fun _ ‚Ü¶ integrable_hellingerFun_rnDeriv_of_le_one ha_pos ha.le)) (not_lt_of_gt ha).elim

/-- Conditional Hellinger divergence of order `a`. Meaningful for `a ‚àà (0, 1) ‚à™ (1, ‚àû)`. -/
noncomputable def condHellingerDiv (a : ‚Ñù) (Œ∫ Œ∑ : kernel Œ± Œ≤) (Œº : Measure Œ±) : EReal :=
  condFDiv (hellingerFun a) Œ∫ Œ∑ Œº

/-! There are multiple combinations of hypotheses that give rise to slightly different versions of
the following lemmas. The ones we will consider as a normal form are when we assume that `Œº`, `Œ∫`
and `Œ∑` are all finite and `a ‚àà (0, 1) ‚à™ (1, +‚àû)`.

Consider the following conditions:
1. `condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§`
2. `condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº`
3.a `‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)` (`h_int`)
3.b `‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x)` (`h_ac`)
3.c `Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº` (`h_int'`)
4. `condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº - (a - 1)‚Åª¬π * ‚à´ x, ((Œ∑ x) Set.univ).toReal ‚àÇŒº`

Then the following hold:
- 1. ‚Üî 2. (`condHellingerDiv_eq_integral_iff_ne_top`)
- if `1 < a`:
  - 1. ‚Üî 3.a ‚àß 3.b ‚àß 3.c (`condHellingerDiv_ne_top_iff_of_one_lt`)
  - 2. ‚Üî 3.a ‚àß 3.b ‚àß 3.c (`condHellingerDiv_eq_integral_iff_of_one_lt`)
  - 3.a ‚àß 3.b ‚àß 3.c ‚Üí 4. (`condHellingerDiv_eq_integral'_of_one_lt`)
- if `a < 1`:
  - 1. ‚Üî 3.c (`condHellingerDiv_ne_top_iff_of_lt_one`)
  - 2. ‚Üî 3.c (`condHellingerDiv_eq_integral_iff_of_lt_one`)
  - 3.c ‚Üí 4. (`condHellingerDiv_eq_integral'_of_lt_one`)

The implications 4. ‚Üí 1./2./3. are not explicitely stated but, if needed, it should be immediate to
prove 4. ‚Üí 1. and then have all the other implications for free.
-/
section CondHellingerEq

lemma condHellingerDiv_of_not_ae_finite (h_ae : ¬¨ ‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := condFDiv_of_not_ae_finite h_ae

lemma condHellingerDiv_of_not_ae_integrable [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ¬¨ ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := condFDiv_of_not_ae_integrable h_int

lemma condHellingerDiv_of_not_ae_integrable_of_le_one (ha : a ‚â§ 1)
    (h_int : ¬¨ ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  apply condHellingerDiv_of_not_ae_finite
  rw [hellingerDiv_ae_ne_top_iff_of_le_one ha]
  exact h_int

lemma condHellingerDiv_of_not_ae_ac_of_one_lt (ha : 1 < a) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_ac : ¬¨ ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x)) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  apply condHellingerDiv_of_not_ae_finite
  rw [hellingerDiv_ae_ne_top_iff]
  tauto

lemma condHellingerDiv_of_not_integrable
    (h_int : ¬¨ Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := condFDiv_of_not_integrable h_int

lemma condHellingerDiv_of_not_integrable' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int' : ¬¨ Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§ := by
  by_cases h_int2 : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x)
  swap; exact condHellingerDiv_of_not_ae_integrable h_int2
  by_cases h_ac : 1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, Œ∫ x ‚â™ Œ∑ x
  swap
  ¬∑ push_neg at h_ac
    exact condHellingerDiv_of_not_ae_ac_of_one_lt h_ac.1 h_ac.2
  apply condHellingerDiv_of_not_integrable
  rwa [integrable_hellingerDiv_iff' ha_pos ha_ne_one h_int2 h_ac]

lemma condHellingerDiv_of_ae_finite_of_integrable (h_ae : ‚àÄ·µê x ‚àÇŒº, hellingerDiv a (Œ∫ x) (Œ∑ x) ‚â† ‚ä§)
    (h_int2 : Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condFDiv_eq' h_ae h_int2

lemma condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : 1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int2 : Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff _ _ _).mpr ‚ü®h_int, h_ac‚ü©) h_int2

lemma condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : 1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff _ _ _).mpr ‚ü®h_int, h_ac‚ü©)
    (integrable_hellingerDiv_iff' ha_pos ha_ne_one h_int h_ac |>.mpr h_int')

lemma condHellingerDiv_of_ae_integrable_of_integrable_of_le_one (ha : a ‚â§ 1)
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_int2 : Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff_of_le_one ha _ _).mpr h_int) h_int2

lemma condHellingerDiv_of_integrable'_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº :=
  condHellingerDiv_of_ae_finite_of_integrable
    ((hellingerDiv_ae_ne_top_iff_of_le_one ha.le _ _).mpr
      (eventually_of_forall <| fun _ ‚Ü¶ integrable_hellingerFun_rnDeriv_of_le_one ha_pos ha.le))
    (integrable_hellingerDiv_iff'_of_lt_one ha_pos ha |>.mpr h_int')

lemma condHellingerDiv_eq_top_iff [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚à® (1 < a ‚àß ¬¨ ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚à® ¬¨ Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  constructor
  ¬∑ contrapose!
    rintro ‚ü®h_int, h_ac, h_int2‚ü©
    rw [condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable h_int h_ac h_int2]
    exact EReal.coe_ne_top _
  ¬∑ rintro (h_int | ‚ü®ha, h_ac‚ü© | h_int2)
    ¬∑ exact condHellingerDiv_of_not_ae_integrable h_int
    ¬∑ exact condHellingerDiv_of_not_ae_ac_of_one_lt ha h_ac
    ¬∑ exact condHellingerDiv_of_not_integrable h_int2

lemma condHellingerDiv_ne_top_iff [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß (1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  rw [ne_eq, condHellingerDiv_eq_top_iff]
  push_neg
  rfl

lemma condHellingerDiv_ne_top_iff' (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß (1 < a ‚Üí ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  simp_rw [condHellingerDiv_ne_top_iff]
  refine and_congr_right (fun h_int ‚Ü¶ and_congr_right (fun h_ac ‚Ü¶ ?_))
  rw [integrable_hellingerDiv_iff' ha_pos ha_ne_one h_int h_ac]

lemma condHellingerDiv_ne_top_iff_of_one_lt (ha : 1 < a) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß (‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  simp_rw [condHellingerDiv_ne_top_iff' (zero_lt_one.trans ha) ha.ne.symm, ha, true_implies]

lemma condHellingerDiv_eq_top_iff_of_one_lt (ha : 1 < a) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚à® (1 < a ‚àß ¬¨ ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚à® ¬¨ Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  rw [‚Üê not_not (a := _ = ‚ä§), ‚Üê ne_eq, condHellingerDiv_ne_top_iff_of_one_lt ha]
  tauto

lemma condHellingerDiv_eq_top_iff_of_le_one (ha : a ‚â§ 1) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚à® ¬¨ Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  simp only [condHellingerDiv_eq_top_iff, not_eventually, ha.not_lt, false_and, false_or]

lemma condHellingerDiv_ne_top_iff_of_le_one (ha : a ‚â§ 1) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal) Œº := by
  simp only [condHellingerDiv_ne_top_iff, ha.not_lt, false_implies, true_and]

lemma condHellingerDiv_eq_top_iff_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚ä§
      ‚Üî ¬¨ Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  simp_rw [condHellingerDiv_eq_top_iff_of_le_one ha.le,
    (eventually_of_forall <| fun _ ‚Ü¶ integrable_hellingerFun_rnDeriv_of_le_one ha_pos ha.le),
    integrable_hellingerDiv_iff'_of_lt_one ha_pos ha, not_true, false_or]

lemma condHellingerDiv_ne_top_iff_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§ ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº := by
  rw [ne_eq, condHellingerDiv_eq_top_iff_of_lt_one ha_pos ha, not_not]

lemma condHellingerDiv_eq_integral_iff_ne_top (ha_pos : 0 < a) (ha_ne_one : a ‚â† 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº ‚â† ‚ä§
      ‚Üî condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ h ‚ñ∏ EReal.coe_ne_top _‚ü©
  rw [condHellingerDiv_ne_top_iff' ha_pos ha_ne_one] at h
  exact condHellingerDiv_of_ae_integrable_of_ae_ac_of_integrable' ha_pos ha_ne_one h.1 h.2.1 h.2.2

lemma condHellingerDiv_eq_integral_iff_of_one_lt (ha : 1 < a) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº
      ‚Üî (‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
        ‚àß (‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
        ‚àß Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº :=
  (condHellingerDiv_eq_integral_iff_ne_top (zero_lt_one.trans ha) ha.ne.symm).symm.trans
    (condHellingerDiv_ne_top_iff_of_one_lt ha)

lemma condHellingerDiv_eq_integral_iff_of_lt_one (ha_pos : 0 < a) (ha : a < 1)
    [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    condHellingerDiv a Œ∫ Œ∑ Œº = ‚à´ x, (hellingerDiv a (Œ∫ x) (Œ∑ x)).toReal ‚àÇŒº
      ‚Üî Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº :=
  (condHellingerDiv_eq_integral_iff_ne_top ha_pos ha.ne).symm.trans
    (condHellingerDiv_ne_top_iff_of_lt_one ha_pos ha)

lemma condHellingerDiv_eq_integral'_of_one_lt (ha : 1 < a) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * ‚à´ x, ((Œ∑ x) Set.univ).toReal ‚àÇŒº := by
  rw [condHellingerDiv_eq_integral_iff_of_one_lt ha |>.mpr ‚ü®h_int, h_ac, h_int'‚ü©]
  norm_cast
  calc
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toEReal).toReal ‚àÇŒº := by
      apply integral_congr_ae
      filter_upwards [h_int, h_ac] with x hx_int hx_ac
      congr
      exact hellingerDiv_eq_integral_of_ne_top' ha.ne.symm <|
        hellingerDiv_ne_top_iff_of_one_lt ha _ _ |>.mpr ‚ü®hx_int, hx_ac‚ü©
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº := by
      refine integral_congr_ae (eventually_of_forall fun x ‚Ü¶ ?_)
      dsimp
      rw [EReal.toReal_sub (ne_of_beq_false (by rfl)) (ne_of_beq_false (by rfl))]
      congr
      rw [EReal.toReal_mul, EReal.toReal_coe, EReal.toReal_coe_ennreal]
      all_goals
        simp only [ne_eq, EReal.mul_eq_top, EReal.mul_eq_bot, EReal.coe_ne_bot, false_and,
          EReal.coe_neg', EReal.coe_ennreal_ne_bot, and_false, EReal.coe_ne_top,
          EReal.coe_ennreal_pos, Measure.measure_univ_pos, EReal.coe_pos,
          EReal.coe_ennreal_eq_top_iff, measure_ne_top, or_self, not_false_eq_true]
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) ‚àÇŒº
        - ‚à´ x, ((a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº :=
      integral_sub (Integrable.const_mul h_int' _)
        (Integrable.const_mul (Integrable.kernel _ MeasurableSet.univ) _)
    _ = _ := by
      rw [integral_mul_left, integral_mul_left]

lemma condHellingerDiv_eq_integral'_of_one_lt' (ha : 1 < a) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * (Œº Set.univ).toReal := by
  simp_rw [condHellingerDiv_eq_integral'_of_one_lt ha h_int h_ac h_int', measure_univ,
    ENNReal.one_toReal, integral_const, smul_eq_mul, mul_one]

lemma condHellingerDiv_eq_integral'_of_one_lt'' (ha : 1 < a) [IsProbabilityMeasure Œº]
    [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int : ‚àÄ·µê x ‚àÇŒº, Integrable (fun b ‚Ü¶ hellingerFun a ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal) (Œ∑ x))
    (h_ac : ‚àÄ·µê x ‚àÇŒº, (Œ∫ x) ‚â™ (Œ∑ x))
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π := by
  rw [condHellingerDiv_eq_integral'_of_one_lt' ha h_int h_ac h_int', measure_univ,
    ENNReal.one_toReal, EReal.coe_one, mul_one]

lemma condHellingerDiv_eq_integral'_of_lt_one (ha_pos : 0 < a) (ha : a < 1) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * ‚à´ x, ((Œ∑ x) Set.univ).toReal ‚àÇŒº := by
  rw [condHellingerDiv_eq_integral_iff_of_lt_one ha_pos ha |>.mpr h_int']
  norm_cast
  calc
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toEReal).toReal ‚àÇŒº := by
      apply integral_congr_ae
      filter_upwards with x
      congr
      exact hellingerDiv_eq_integral_of_lt_one' ha_pos ha _ _
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x --from here to the end the proof is the same as the one of `condHellingerDiv_eq_integral'_of_one_lt`, consider separating this part as a lemma
        - (a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº := by
      refine integral_congr_ae (eventually_of_forall fun x ‚Ü¶ ?_)
      dsimp
      rw [EReal.toReal_sub (ne_of_beq_false (by rfl)) (ne_of_beq_false (by rfl))]
      congr
      rw [EReal.toReal_mul, EReal.toReal_coe, EReal.toReal_coe_ennreal]
      all_goals
        simp only [ne_eq, EReal.mul_eq_top, EReal.mul_eq_bot, EReal.coe_ne_bot, false_and,
          EReal.coe_neg', EReal.coe_ennreal_ne_bot, and_false, EReal.coe_ne_top,
          EReal.coe_ennreal_pos, Measure.measure_univ_pos, EReal.coe_pos,
          EReal.coe_ennreal_eq_top_iff, measure_ne_top, or_self, not_false_eq_true]
    _ = ‚à´ x, ((a - 1)‚Åª¬π * ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) ‚àÇŒº
        - ‚à´ x, ((a - 1)‚Åª¬π * ((Œ∑ x) Set.univ).toReal) ‚àÇŒº :=
      integral_sub (Integrable.const_mul h_int' _)
        (Integrable.const_mul (Integrable.kernel _ MeasurableSet.univ) _)
    _ = _ := by
      rw [integral_mul_left, integral_mul_left]

lemma condHellingerDiv_eq_integral'_of_lt_one' (ha_pos : 0 < a) (ha : a < 1) [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π * (Œº Set.univ).toReal := by
  simp_rw [condHellingerDiv_eq_integral'_of_lt_one ha_pos ha h_int', measure_univ,
    ENNReal.one_toReal, integral_const, smul_eq_mul, mul_one]

lemma condHellingerDiv_eq_integral'_of_lt_one'' (ha_pos : 0 < a) (ha : a < 1)
    [IsProbabilityMeasure Œº] [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (h_int' : Integrable (fun x ‚Ü¶ ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x) Œº) :
    condHellingerDiv a Œ∫ Œ∑ Œº = (a - 1)‚Åª¬π * ‚à´ x, ‚à´ b, ((‚àÇŒ∫ x/‚àÇŒ∑ x) b).toReal ^ a ‚àÇŒ∑ x ‚àÇŒº
      - (a - 1)‚Åª¬π := by
  rw [condHellingerDiv_eq_integral'_of_lt_one' ha_pos ha h_int', measure_univ,
    ENNReal.one_toReal, EReal.coe_one, mul_one]

end CondHellingerEq

lemma hellingerDiv_compProd_left [MeasurableSpace.CountableOrCountablyGenerated Œ± Œ≤]
    (ha_pos : 0 < a) (Œº : Measure Œ±) [IsFiniteMeasure Œº] (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫]
    [‚àÄ x, NeZero (Œ∫ x)] [IsFiniteKernel Œ∑] :
    hellingerDiv a (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑) = condHellingerDiv a Œ∫ Œ∑ Œº := by
  rw [hellingerDiv, condHellingerDiv, fDiv_compProd_left _ _ _
    (stronglyMeasurable_hellingerFun ha_pos) (convexOn_hellingerFun ha_pos)]

end Conditional

end ProbabilityTheory
--TODO: generalize the definition of hellinger to 0, 1 and maybe infinity. at 1 it should be kl, at 0 see the renyi div, at ‚àû see if there is anything useful in the renyi divergence paper
--there are some results that we will have to show for `a < 1` and `a > 1` separately and then propagate to the general case by continuity
