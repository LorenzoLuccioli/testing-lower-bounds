/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import TestingLowerBounds.ForMathlib.EReal
import Mathlib.Analysis.Convex.Integral
import Mathlib.Analysis.Calculus.MeanValue
import TestingLowerBounds.SoonInMathlib.RadonNikodym

/-!

# f-Divergences

## Main definitions

* `FooBar`

## Main statements

* `fooBar_unique`

## Notation

## Implementation details

The most natural type for `f` is `‚Ñù‚â•0‚àû ‚Üí EReal` since we apply it to an `‚Ñù‚â•0‚àû`-values RN derivative,
and its value can be in general both positive or negative, and potentially +‚àû.
However, we use `‚Ñù ‚Üí ‚Ñù` instead, for the following reasons:
* domain: convexity results like `ConvexOn.map_average_le` don't work for `‚Ñù‚â•0‚àû` because they
  require a normed space with scalars in `‚Ñù`, but `‚Ñù‚â•0‚àû` is a module over `‚Ñù‚â•0`.
  Also, the RN derivative is almost everywhere finite for œÉ-finite measures, so losing ‚àû in the
  domain is not an issue.
* codomain: `EReal` is underdeveloped, and all functions we will actually use are finite anyway.

Most results will require these conditions on `f`:
`(hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hf_cont : ContinuousOn f (Set.Ici 0)) (hf_one : f 1 = 0)`

## References

* [F. Bar, *Quuxes*][bibkey]

## Tags

Foobars, barfoos
-/

open Real MeasureTheory Filter

open scoped ENNReal NNReal Topology

namespace ProbabilityTheory

variable {Œ± Œ≤ : Type*} {mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤}
  {Œº ŒΩ : Measure Œ±} {Œ∫ Œ∑ : kernel Œ± Œ≤} {f g : ‚Ñù ‚Üí ‚Ñù}

lemma integrable_toReal_iff {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : AEMeasurable f Œº) (hf_ne_top : ‚àÄ·µê x ‚àÇŒº, f x ‚â† ‚àû) :
    Integrable (fun x ‚Ü¶ (f x).toReal) Œº ‚Üî ‚à´‚Åª x, f x ‚àÇŒº ‚â† ‚àû := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ integrable_toReal_of_lintegral_ne_top hf h‚ü©
  rw [Integrable, HasFiniteIntegral] at h
  have : ‚àÄ·µê x ‚àÇŒº, f x = ‚Üë‚Äñ(f x).toReal‚Äñ‚Çä := by
    filter_upwards [hf_ne_top] with x hx
    rw [‚Üê ofReal_norm_eq_coe_nnnorm, norm_of_nonneg ENNReal.toReal_nonneg, ENNReal.ofReal_toReal hx]
  rw [lintegral_congr_ae this]
  exact h.2.ne

-- we put the coe outside the limsup to ensure it's not ‚ä•
open Classical in
noncomputable
def derivAtTop (f : ‚Ñù ‚Üí ‚Ñù) : EReal :=
  if Tendsto (fun x ‚Ü¶ f x / x) atTop atTop then ‚ä§ else ‚Üë(limsup (fun x ‚Ü¶ f x / x) atTop)

lemma bot_lt_derivAtTop : ‚ä• < derivAtTop f := by
  rw [derivAtTop]
  split_ifs with h <;> simp

lemma derivAtTop_ne_bot : derivAtTop f ‚â† ‚ä• := bot_lt_derivAtTop.ne'

lemma derivAtTop_of_tendsto {y : ‚Ñù} (h : Tendsto (fun x ‚Ü¶ f x / x) atTop (ùìù y)) :
    derivAtTop f = y := by
  rw [derivAtTop, if_neg]
  ¬∑ rw [h.limsup_eq]
  ¬∑ exact h.not_tendsto (disjoint_nhds_atTop _)

@[simp]
lemma derivAtTop_const (c : ‚Ñù) : derivAtTop (fun _ ‚Ü¶ c) = 0 := by
  refine derivAtTop_of_tendsto ?_
  sorry

@[simp]
lemma derivAtTop_id : derivAtTop id = 1 := by
  refine derivAtTop_of_tendsto ?_
  sorry

@[simp]
lemma derivAtTop_id' : derivAtTop (fun x ‚Ü¶ x) = 1 := derivAtTop_id

lemma derivAtTop_add (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hg_cvx : ConvexOn ‚Ñù (Set.Ici 0) g) :
  derivAtTop (fun x ‚Ü¶ f x + g x) = derivAtTop f + derivAtTop g := by
  sorry

lemma derivAtTop_add' (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hg_cvx : ConvexOn ‚Ñù (Set.Ici 0) g) :
    derivAtTop (f + g) = derivAtTop f + derivAtTop g := by
  rw [‚Üê derivAtTop_add hf_cvx hg_cvx]
  rfl

lemma derivAtTop_const_mul (c : ‚Ñù) :
    derivAtTop (fun x ‚Ü¶ c * f x) = c * derivAtTop f := by
  sorry

lemma le_add_derivAtTop (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f)
    (h : ¬¨ Tendsto (fun x ‚Ü¶ f x / x) atTop atTop) {x y : ‚Ñù} (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) :
    f x ‚â§ f y + (derivAtTop f).toReal * (x - y) := by
  sorry

lemma le_add_derivAtTop' (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f)
    (h : ¬¨ Tendsto (fun x ‚Ü¶ f x / x) atTop atTop) {x u : ‚Ñù} (hx : 0 ‚â§ x) (hu : 0 ‚â§ u) :
    f x ‚â§ f (x * u) + (derivAtTop f).toReal * x * (1 - u) := by
  refine (le_add_derivAtTop h_cvx h hx (mul_nonneg hx hu)).trans_eq ?_
  rw [mul_assoc, mul_sub, mul_sub, mul_one, mul_sub]

open Classical in
/-- f-Divergence of two measures. -/
noncomputable
def fDiv (f : ‚Ñù ‚Üí ‚Ñù) (Œº ŒΩ : Measure Œ±) : EReal :=
  if ¬¨ Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ then ‚ä§
  else ‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ + derivAtTop f * Œº.singularPart ŒΩ Set.univ

lemma fDiv_of_not_integrable (hf : ¬¨ Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ = ‚ä§ := if_pos hf

lemma fDiv_of_integrable (hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ = ‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ + derivAtTop f * Œº.singularPart ŒΩ Set.univ :=
  if_neg (not_not.mpr hf)

lemma fDiv_of_mul_eq_top (h : derivAtTop f * Œº.singularPart ŒΩ Set.univ = ‚ä§) :
    fDiv f Œº ŒΩ = ‚ä§ := by
  by_cases hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
  ¬∑ rw [fDiv, if_neg (not_not.mpr hf), h, EReal.coe_add_top]
  ¬∑ exact fDiv_of_not_integrable hf

@[simp]
lemma fDiv_zero (Œº ŒΩ : Measure Œ±) : fDiv (fun _ ‚Ü¶ 0) Œº ŒΩ = 0 := by simp [fDiv]

@[simp]
lemma fDiv_const (c : ‚Ñù) (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :
    fDiv (fun _ ‚Ü¶ c) Œº ŒΩ = ŒΩ Set.univ * c := by
  rw [fDiv_of_integrable (integrable_const c), integral_const]
  simp only [smul_eq_mul, EReal.coe_mul, derivAtTop_const, zero_mul, add_zero]
  congr
  rw [EReal.coe_ennreal_toReal]
  exact measure_ne_top _ _

lemma fDiv_const' {c : ‚Ñù} (hc : 0 ‚â§ c) (Œº ŒΩ : Measure Œ±) :
    fDiv (fun _ ‚Ü¶ c) Œº ŒΩ = ŒΩ Set.univ * c := by
  by_cases hŒΩ : IsFiniteMeasure ŒΩ
  ¬∑ exact fDiv_const c Œº ŒΩ
  ¬∑ have : ŒΩ Set.univ = ‚àû := by
      by_contra h_univ
      exact absurd ‚ü®Ne.lt_top h_univ‚ü© hŒΩ
    rw [this]
    by_cases hc0 : c = 0
    ¬∑ simp [hc0]
    rw [fDiv_of_not_integrable]
    ¬∑ simp only [EReal.coe_ennreal_top]
      rw [EReal.top_mul_of_pos]
      refine lt_of_le_of_ne ?_ (Ne.symm ?_)
      ¬∑ exact mod_cast hc
      ¬∑ exact mod_cast hc0
    ¬∑ rw [integrable_const_iff]
      simp [hc0, this]

lemma fDiv_self (hf_one : f 1 = 0) (Œº : Measure Œ±) [SigmaFinite Œº] : fDiv f Œº Œº = 0 := by
  have h : (fun x ‚Ü¶ f (Œº.rnDeriv Œº x).toReal) =·µê[Œº] 0 := by
    filter_upwards [Measure.rnDeriv_self Œº] with x hx
    rw [hx, ENNReal.one_toReal, hf_one]
    rfl
  rw [fDiv_of_integrable]
  swap; ¬∑ rw [integrable_congr h]; exact integrable_zero _ _ _
  rw [integral_congr_ae h]
  simp only [Pi.zero_apply, integral_zero, EReal.coe_zero, zero_add]
  rw [Measure.singularPart_self]
  simp

lemma fDiv_id (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    fDiv id Œº ŒΩ = Œº Set.univ := by
  by_cases h_int : Integrable (fun x ‚Ü¶ ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
  ¬∑ rw [fDiv_of_integrable h_int]
    simp only [id_eq, derivAtTop_id, one_mul]
    rw [‚Üê integral_univ, Measure.set_integral_toReal_rnDeriv_eq_withDensity]
    have h_ne_top : (Measure.withDensity ŒΩ (‚àÇŒº/‚àÇŒΩ)) Set.univ ‚â† ‚àû := by
      rw [withDensity_apply _ MeasurableSet.univ, set_lintegral_univ]
      rwa [integrable_toReal_iff] at h_int
      ¬∑ exact (Œº.measurable_rnDeriv ŒΩ).aemeasurable
      ¬∑ exact Œº.rnDeriv_ne_top ŒΩ
    rw [EReal.coe_ennreal_toReal h_ne_top]
    norm_cast
    conv_rhs => rw [Œº.haveLebesgueDecomposition_add ŒΩ, add_comm]
  ¬∑ rw [fDiv_of_not_integrable h_int]
    norm_cast
    symm
    by_contra h_ne_top
    have : IsFiniteMeasure Œº := ‚ü®Ne.lt_top ?_‚ü©
    swap; ¬∑ rw [‚Üê EReal.coe_ennreal_top] at h_ne_top; exact mod_cast h_ne_top
    refine h_int ?_
    refine integrable_toReal_of_lintegral_ne_top (Œº.measurable_rnDeriv ŒΩ).aemeasurable ?_
    exact (Measure.lintegral_rnDeriv_lt_top _ _).ne

lemma fDiv_id' (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [SigmaFinite ŒΩ] :
    fDiv (fun x ‚Ü¶ x) Œº ŒΩ = Œº Set.univ := fDiv_id Œº ŒΩ

lemma fDiv_mul {c : ‚Ñù} (hc : 0 ‚â§ c) (f : ‚Ñù ‚Üí ‚Ñù) (Œº ŒΩ : Measure Œ±) :
    fDiv (fun x ‚Ü¶ c * f x) Œº ŒΩ = c * fDiv f Œº ŒΩ := by
  by_cases hc0 : c = 0
  ¬∑ simp [hc0]
  by_cases h_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
  ¬∑ rw [fDiv_of_integrable h_int, fDiv_of_integrable]
    swap; ¬∑ exact h_int.const_mul _
    rw [integral_mul_left, derivAtTop_const_mul]
    simp only [EReal.coe_mul]
    sorry
  ¬∑ rw [fDiv_of_not_integrable h_int, fDiv_of_not_integrable]
    ¬∑ rw [EReal.mul_top_of_pos]
      norm_cast
      exact lt_of_le_of_ne hc (Ne.symm hc0)
    ¬∑ refine fun h ‚Ü¶ h_int ?_
      have : (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) = (fun x ‚Ü¶ c‚Åª¬π * (c * f ((‚àÇŒº/‚àÇŒΩ) x).toReal)) := by
        ext; rw [‚Üê mul_assoc, inv_mul_cancel hc0, one_mul]
      rw [this]
      exact h.const_mul _

-- TODO: in the case where both functions are convex, integrability of the sum is equivalent to
-- integrability of both, and we don't need hf and hg.
lemma fDiv_add (hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ)
    (hg : Integrable (fun x ‚Ü¶ g ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ)
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hg_cvx : ConvexOn ‚Ñù (Set.Ici 0) g) :
    fDiv (fun x ‚Ü¶ f x + g x) Œº ŒΩ = fDiv f Œº ŒΩ + fDiv g Œº ŒΩ := by
  rw [fDiv_of_integrable (hf.add hg), integral_add hf hg, fDiv_of_integrable hf,
    fDiv_of_integrable hg, derivAtTop_add hf_cvx hg_cvx]
  simp only [EReal.coe_add]
  rw [add_assoc, add_assoc]
  congr 1
  conv_rhs => rw [‚Üê add_assoc, add_comm, ‚Üê add_assoc, add_comm]
  congr 1
  sorry

lemma fDiv_add_linear' {c : ‚Ñù} (hc : 0 ‚â§ c) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    fDiv (fun x ‚Ü¶ f x + c * (x - 1)) Œº ŒΩ
      = fDiv f Œº ŒΩ + c * ((Œº Set.univ).toReal - (ŒΩ Set.univ).toReal) := by
  rw [fDiv_add hf _ hf_cvx _]
  ¬∑ simp_rw [sub_eq_add_neg]
    rw [fDiv_mul hc, fDiv_add Measure.integrable_toReal_rnDeriv (integrable_const _),
      fDiv_const, fDiv_id']
    rotate_left
    ¬∑ exact convexOn_id (convex_Ici 0)
    ¬∑ exact convexOn_const _ (convex_Ici 0)
    simp only [EReal.coe_neg, EReal.coe_one, mul_neg, mul_one]
    congr
    ¬∑ rw [EReal.coe_ennreal_toReal]
      exact measure_ne_top _ _
    ¬∑ rw [EReal.coe_ennreal_toReal]
      exact measure_ne_top _ _
  ¬∑ exact (Measure.integrable_toReal_rnDeriv.sub (integrable_const _)).const_mul c
  ¬∑ sorry

lemma fDiv_add_linear {c : ‚Ñù} (hc : 0 ‚â§ c) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (h_eq : Œº Set.univ = ŒΩ Set.univ) :
    fDiv (fun x ‚Ü¶ f x + c * (x - 1)) Œº ŒΩ = fDiv f Œº ŒΩ := by
  by_cases hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
  ¬∑ rw [fDiv_add_linear' hc hf hf_cvx, h_eq, ‚Üê EReal.coe_sub, sub_self]
    simp
  ¬∑ rw [fDiv_of_not_integrable hf,fDiv_of_not_integrable]
    refine fun h_int ‚Ü¶ hf ?_
    have : (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal)
        = fun x ‚Ü¶ (f ((‚àÇŒº/‚àÇŒΩ) x).toReal + c * (((‚àÇŒº/‚àÇŒΩ) x).toReal - 1))
          - c * (((‚àÇŒº/‚àÇŒΩ) x).toReal - 1) := by
      ext x
      simp
    rw [this]
    exact h_int.add ((Measure.integrable_toReal_rnDeriv.sub (integrable_const _)).const_mul c).neg

lemma fDiv_of_mutuallySingular [SigmaFinite Œº] [IsFiniteMeasure ŒΩ] (h : Œº ‚üÇ‚Çò ŒΩ) :
    fDiv f Œº ŒΩ = (f 0 : EReal) * ŒΩ Set.univ + derivAtTop f * Œº Set.univ := by
  have : Œº.singularPart ŒΩ = Œº := (Œº.singularPart_eq_self ŒΩ).mpr h
  have hf_rnDeriv : (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) =·µê[ŒΩ] fun _ ‚Ü¶ f 0 := by
    filter_upwards [Measure.rnDeriv_eq_zero_of_mutuallySingular h Measure.AbsolutelyContinuous.rfl]
      with x hx using by simp [hx]
  have h_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
      rw [integrable_congr hf_rnDeriv]
      exact integrable_const _
  rw [fDiv_of_integrable h_int, integral_congr_ae hf_rnDeriv]
  simp only [integral_const, smul_eq_mul, EReal.coe_mul, this]
  rw [mul_comm]
  congr
  rw [EReal.coe_ennreal_toReal]
  exact measure_ne_top _ _

lemma fDiv_of_absolutelyContinuous
    [Decidable (Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ)] (h : Œº ‚â™ ŒΩ) :
    fDiv f Œº ŒΩ = if Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
      then (‚Üë(‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ) : EReal) else ‚ä§ := by
  split_ifs with h_int
  ¬∑ rw [fDiv_of_integrable h_int, Measure.singularPart_eq_zero_of_ac h]
    simp only [Measure.zero_toOuterMeasure, OuterMeasure.coe_zero, Pi.zero_apply, mul_zero,
      ENNReal.zero_toReal, add_zero]
    simp [Measure.singularPart_eq_zero_of_ac h]
  ¬∑ rw [fDiv_of_not_integrable h_int]

lemma fDiv_add_const (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [IsFiniteMeasure ŒΩ]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (c : ‚Ñù) :
    fDiv (fun x ‚Ü¶ f x + c) Œº ŒΩ = fDiv f Œº ŒΩ + c * ŒΩ Set.univ := by
  by_cases hf_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
  ¬∑ rw [fDiv_add hf_int (integrable_const _) hf_cvx, fDiv_const, mul_comm]
    exact convexOn_const _ (convex_Ici 0)
  ¬∑ rw [fDiv_of_not_integrable hf_int, fDiv_of_not_integrable]
    ¬∑ rw [‚Üê EReal.coe_ennreal_toReal, ‚Üê EReal.coe_mul, EReal.top_add_coe]
      exact measure_ne_top _ _
    ¬∑ have : (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) = (fun x ‚Ü¶ (f ((‚àÇŒº/‚àÇŒΩ) x).toReal + c) - c) := by
        ext; simp
      rw [this] at hf_int
      exact fun h_int ‚Ü¶ hf_int (h_int.sub (integrable_const _))

lemma fDiv_sub_const (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [IsFiniteMeasure ŒΩ]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (c : ‚Ñù) :
    fDiv (fun x ‚Ü¶ f x - c) Œº ŒΩ = fDiv f Œº ŒΩ - c * ŒΩ Set.univ := by
  have : f = fun x ‚Ü¶ (f x - c) + c := by ext; simp
  conv_rhs => rw [this]
  rw [fDiv_add_const]
  ¬∑ sorry
  ¬∑ exact hf_cvx.sub (concaveOn_const _ (convex_Ici 0))

lemma fDiv_eq_add_withDensity_singularPart
    (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [IsFiniteMeasure ŒΩ]
    (hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ = fDiv f (ŒΩ.withDensity (‚àÇŒº/‚àÇŒΩ)) ŒΩ + fDiv f (Œº.singularPart ŒΩ) ŒΩ
      - f 0 * ŒΩ Set.univ := by
  have h_int_iff : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
      ‚Üî Integrable (fun x ‚Ü¶ f ((‚àÇ(ŒΩ.withDensity (‚àÇŒº/‚àÇŒΩ))/‚àÇŒΩ) x).toReal) ŒΩ := by
    refine integrable_congr ?_
    filter_upwards [Measure.rnDeriv_withDensity ŒΩ (Œº.measurable_rnDeriv ŒΩ)] with x hx
    rw [hx]
  classical
  rw [fDiv_of_mutuallySingular (Measure.mutuallySingular_singularPart _ _)]
  by_cases hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
  ¬∑ rw [fDiv_of_absolutelyContinuous (withDensity_absolutelyContinuous _ _), if_pos,
      fDiv_of_integrable hf]
    swap
    ¬∑ exact h_int_iff.mp hf
    rw [add_sub_assoc]
    congr 2
    ¬∑ refine integral_congr_ae ?_
      filter_upwards [Measure.rnDeriv_withDensity ŒΩ (Œº.measurable_rnDeriv ŒΩ)] with x hx
      rw [hx]
    sorry
  ¬∑ rw [fDiv_of_not_integrable hf, fDiv_of_not_integrable]
    ¬∑ sorry
    ¬∑ rwa [‚Üê h_int_iff]

lemma fDiv_eq_add_withDensity_singularPart'
    (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [IsFiniteMeasure ŒΩ]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f)
    (hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ = fDiv (fun x ‚Ü¶ f x - f 0) (ŒΩ.withDensity (‚àÇŒº/‚àÇŒΩ)) ŒΩ
      + fDiv f (Œº.singularPart ŒΩ) ŒΩ := by
  rw [fDiv_eq_add_withDensity_singularPart _ _ hf, fDiv_sub_const, add_sub_assoc,
    sub_eq_add_neg, sub_eq_add_neg, add_assoc]
  ¬∑ congr 1
    rw [add_comm]
  ¬∑ exact hf_cvx

lemma fDiv_eq_add_withDensity_singularPart''
    (Œº ŒΩ : Measure Œ±) [SigmaFinite Œº] [IsFiniteMeasure ŒΩ]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f)
    (hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ = fDiv f (ŒΩ.withDensity (‚àÇŒº/‚àÇŒΩ)) ŒΩ
      + fDiv (fun x ‚Ü¶ f x - f 0) (Œº.singularPart ŒΩ) ŒΩ := by
  rw [fDiv_eq_add_withDensity_singularPart _ _ hf, fDiv_sub_const, add_sub_assoc,
    sub_eq_add_neg]
  exact hf_cvx

lemma fDiv_lt_top_of_ac [SigmaFinite Œº] [SigmaFinite ŒΩ] (h : Œº ‚â™ ŒΩ)
    (h_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ < ‚ä§ := by
  classical
  rw [fDiv_of_absolutelyContinuous h, if_pos h_int]
  simp

section derivAtTopTop

lemma fDiv_of_not_ac [SigmaFinite Œº] [SigmaFinite ŒΩ] (hf : derivAtTop f = ‚ä§) (hŒºŒΩ : ¬¨ Œº ‚â™ ŒΩ) :
    fDiv f Œº ŒΩ = ‚ä§ := by
  rw [fDiv]
  split_ifs with h_int
  ¬∑ rw [hf]
    suffices Measure.singularPart Œº ŒΩ Set.univ ‚â† 0 by
      rw [EReal.top_mul_of_pos, EReal.coe_add_top]
      refine lt_of_le_of_ne (EReal.coe_ennreal_nonneg _) ?_
      exact mod_cast this.symm
    simp only [ne_eq, Measure.measure_univ_eq_zero]
    rw [Measure.singularPart_eq_zero]
    exact hŒºŒΩ
  ¬∑ rfl

lemma fDiv_lt_top_iff_ac [SigmaFinite Œº] [SigmaFinite ŒΩ] (hf : derivAtTop f = ‚ä§)
    (h_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ < ‚ä§ ‚Üî Œº ‚â™ ŒΩ := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ fDiv_lt_top_of_ac h h_int‚ü©
  by_contra h_not_ac
  refine h.ne (fDiv_of_not_ac hf h_not_ac)

lemma fDiv_ne_top_iff_ac [SigmaFinite Œº] [SigmaFinite ŒΩ] (hf : derivAtTop f = ‚ä§)
    (h_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ ‚â† ‚ä§ ‚Üî Œº ‚â™ ŒΩ := by
  rw [‚Üê fDiv_lt_top_iff_ac hf h_int, lt_top_iff_ne_top]

lemma fDiv_eq_top_iff_not_ac [SigmaFinite Œº] [SigmaFinite ŒΩ] (hf : derivAtTop f = ‚ä§)
    (h_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ = ‚ä§ ‚Üî ¬¨ Œº ‚â™ ŒΩ := by
  rw [‚Üê fDiv_ne_top_iff_ac hf h_int, not_not]

lemma fDiv_of_derivAtTop_eq_top [SigmaFinite Œº] [SigmaFinite ŒΩ] (hf : derivAtTop f = ‚ä§)
    [Decidable (Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚àß Œº ‚â™ ŒΩ)] :
    fDiv f Œº ŒΩ = if (Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ ‚àß Œº ‚â™ ŒΩ)
      then ((‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ : ‚Ñù) : EReal)
      else ‚ä§ := by
  split_ifs with h
  ¬∑ rw [fDiv_of_integrable h.1, Measure.singularPart_eq_zero_of_ac h.2]
    simp
  ¬∑ push_neg at h
    by_cases hf_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
    ¬∑ exact fDiv_of_not_ac hf (h hf_int)
    ¬∑ exact fDiv_of_not_integrable hf_int

end derivAtTopTop

lemma fDiv_lt_top_of_derivAtTop_ne_top [IsFiniteMeasure Œº] [SigmaFinite ŒΩ]
    (hf : derivAtTop f ‚â† ‚ä§) (h_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ < ‚ä§ := by
  rw [fDiv_of_integrable h_int]
  refine EReal.add_lt_top ?_ ?_
  ¬∑ simp
  ¬∑ have : Œº.singularPart ŒΩ Set.univ < (‚ä§ : EReal) := by
      rw [‚Üê EReal.coe_ennreal_top]
      norm_cast
      exact measure_lt_top _ _
    rw [ne_eq, EReal.mul_eq_top]
    simp only [derivAtTop_ne_bot, false_and, EReal.coe_ennreal_ne_bot, and_false, hf,
      EReal.coe_ennreal_pos, Measure.measure_univ_pos, ne_eq, EReal.coe_ennreal_eq_top_iff,
      false_or, not_and]
    exact fun _ ‚Ü¶ measure_ne_top _ _

lemma fDiv_lt_top_iff_of_derivAtTop_ne_top [IsFiniteMeasure Œº] [SigmaFinite ŒΩ]
    (hf : derivAtTop f ‚â† ‚ä§) :
    fDiv f Œº ŒΩ < ‚ä§ ‚Üî Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  refine ‚ü®fun h ‚Ü¶ ?_, fDiv_lt_top_of_derivAtTop_ne_top hf‚ü©
  by_contra h_not_int
  rw [fDiv_of_not_integrable h_not_int] at h
  simp at h

lemma fDiv_ne_top_iff_of_derivAtTop_ne_top [IsFiniteMeasure Œº] [SigmaFinite ŒΩ]
    (hf : derivAtTop f ‚â† ‚ä§) :
    fDiv f Œº ŒΩ ‚â† ‚ä§ ‚Üî Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  rw [‚Üê fDiv_lt_top_iff_of_derivAtTop_ne_top hf, lt_top_iff_ne_top]

lemma fDiv_eq_top_iff_of_derivAtTop_ne_top [IsFiniteMeasure Œº] [SigmaFinite ŒΩ]
    (hf : derivAtTop f ‚â† ‚ä§) :
    fDiv f Œº ŒΩ = ‚ä§ ‚Üî ¬¨ Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  rw [‚Üê fDiv_ne_top_iff_of_derivAtTop_ne_top hf, not_not]

lemma fDiv_eq_top_iff [IsFiniteMeasure Œº] [SigmaFinite ŒΩ] :
    fDiv f Œº ŒΩ = ‚ä§
      ‚Üî (¬¨ Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) ‚à® (derivAtTop f = ‚ä§ ‚àß ¬¨ Œº ‚â™ ŒΩ) := by
  by_cases h : derivAtTop f = ‚ä§
  ¬∑ simp only [h, true_and]
    by_cases hf : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ
    ¬∑ simp only [hf, not_true_eq_false, false_or]
      exact fDiv_eq_top_iff_not_ac h hf
    ¬∑ simp [hf, fDiv_of_not_integrable hf]
  ¬∑ simp only [h, false_and, or_false]
    exact fDiv_eq_top_iff_of_derivAtTop_ne_top h

lemma fDiv_ne_top_iff [IsFiniteMeasure Œº] [SigmaFinite ŒΩ] :
    fDiv f Œº ŒΩ ‚â† ‚ä§
      ‚Üî (Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) ‚àß (derivAtTop f = ‚ä§ ‚Üí Œº ‚â™ ŒΩ) := by
  rw [ne_eq, fDiv_eq_top_iff]
  push_neg
  rfl

lemma integrable_of_fDiv_ne_top (h : fDiv f Œº ŒΩ ‚â† ‚ä§) :
    Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ := by
  by_contra h_not
  exact h (fDiv_of_not_integrable h_not)

lemma fDiv_of_ne_top (h : fDiv f Œº ŒΩ ‚â† ‚ä§) :
    fDiv f Œº ŒΩ = ‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ + derivAtTop f * Œº.singularPart ŒΩ Set.univ := by
  rw [fDiv_of_integrable]
  exact integrable_of_fDiv_ne_top h

/-
-- todo: extend beyond Œº ‚â™ ŒΩ
lemma le_fDiv [IsFiniteMeasure Œº] [IsProbabilityMeasure ŒΩ]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hf_cont : ContinuousOn f (Set.Ici 0))
    (hf_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) (hŒºŒΩ : Œº ‚â™ ŒΩ) :
    f (Œº Set.univ).toReal ‚â§ fDiv f Œº ŒΩ := by
  classical
  rw [fDiv_of_absolutelyContinuous hŒºŒΩ, if_pos hf_int]
  calc f (Œº Set.univ).toReal
    = f (‚à´ x, ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ) := by rw [Measure.integral_toReal_rnDeriv hŒºŒΩ]
  _ ‚â§ ‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ := by
    rw [‚Üê average_eq_integral, ‚Üê average_eq_integral]
    exact ConvexOn.map_average_le hf_cvx hf_cont isClosed_Ici (by simp)
      Measure.integrable_toReal_rnDeriv hf_int
  _ = ‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ := rfl

lemma fDiv_nonneg [IsProbabilityMeasure Œº] [IsProbabilityMeasure ŒΩ]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hf_cont : ContinuousOn f (Set.Ici 0)) (hf_one : f 1 = 0)
    (hf_int : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) (hŒºŒΩ : Œº ‚â™ ŒΩ) :
    0 ‚â§ fDiv f Œº ŒΩ :=
  calc 0 = f (Œº Set.univ).toReal := by simp [hf_one]
  _ ‚â§ ‚à´ x, f ((‚àÇŒº/‚àÇŒΩ) x).toReal ‚àÇŒΩ := le_fDiv hf_cvx hf_cont hf_int hŒºŒΩ
-/

section Conditional

open Classical in
/- Conditinal f-divergence. -/
noncomputable
def condFDivReal (f : ‚Ñù ‚Üí ‚Ñù) (Œ∫ Œ∑ : kernel Œ± Œ≤) (Œº : Measure Œ±) : EReal :=
  if (‚àÄ·µê a ‚àÇŒº, fDiv f (Œ∫ a) (Œ∑ a) ‚â† ‚ä§)
    ‚àß (Integrable (fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal) Œº)
  then ((Œº[fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal] : ‚Ñù) : EReal)
  else ‚ä§

lemma condFDivReal_of_not_ae_finite (hf : ¬¨ ‚àÄ·µê a ‚àÇŒº, fDiv f (Œ∫ a) (Œ∑ a) ‚â† ‚ä§) :
    condFDivReal f Œ∫ Œ∑ Œº = ‚ä§ := by
  rw [condFDivReal, if_neg]
  push_neg
  exact fun h ‚Ü¶ absurd h hf

lemma condFDivReal_of_not_integrable
    (hf : ¬¨ Integrable (fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condFDivReal f Œ∫ Œ∑ Œº = ‚ä§ := by
  rw [condFDivReal, if_neg]
  push_neg
  exact fun _ ‚Ü¶ hf

lemma condFDivReal_eq (hf_ae : ‚àÄ·µê a ‚àÇŒº, fDiv f (Œ∫ a) (Œ∑ a) ‚â† ‚ä§)
    (hf : Integrable (fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condFDivReal f Œ∫ Œ∑ Œº = ((Œº[fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal] : ‚Ñù) : EReal) :=
  if_pos ‚ü®hf_ae, hf‚ü©

variable [MeasurableSpace.CountablyGenerated Œ≤]

section Integrable

/-! We show that the integrability of the functions used in `fDiv f (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑)`
and in `condFDivReal f Œ∫ Œ∑ Œº` are equivalent. -/

-- todo find better name
theorem _root_.MeasureTheory.Integrable.compProd_mk_left_ae' [NormedAddCommGroup E]
    [IsFiniteMeasure Œº] [IsSFiniteKernel Œ∫] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
    (hf : Integrable f (Œº ‚äó‚Çò Œ∫)) :
    ‚àÄ·µê x ‚àÇŒº, Integrable (fun y ‚Ü¶ f (x, y)) (Œ∫ x) :=
  hf.compProd_mk_left_ae

theorem _root_.MeasureTheory.Integrable.integral_norm_compProd' [NormedAddCommGroup E]
    [IsFiniteMeasure Œº] [IsSFiniteKernel Œ∫] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
    (hf : Integrable f (Œº ‚äó‚Çò Œ∫)) :
    Integrable (fun x ‚Ü¶ ‚à´ y, ‚Äñf (x, y)‚Äñ ‚àÇ(Œ∫ x)) Œº :=
  hf.integral_norm_compProd

theorem _root_.MeasureTheory.Integrable.integral_compProd' [NormedAddCommGroup E]
    [IsFiniteMeasure Œº] [IsSFiniteKernel Œ∫] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ [NormedSpace ‚Ñù E] [CompleteSpace E]
    (hf : Integrable f (Œº ‚äó‚Çò Œ∫)) :
    Integrable (fun x ‚Ü¶ ‚à´ y, f (x, y) ‚àÇ(Œ∫ x)) Œº :=
  hf.integral_compProd

lemma f_compProd_congr (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    ‚àÄ·µê a ‚àÇŒΩ, (fun b ‚Ü¶ f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) (a, b)).toReal)
      =·µê[Œ∑ a] fun b ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal := by
  have h_eq_compProd := kernel.rnDeriv_measure_compProd' Œº ŒΩ Œ∫ Œ∑
  filter_upwards [h_eq_compProd] with a ha
  filter_upwards [ha] with b hb
  rw [hb]

lemma integral_f_compProd_congr (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) (a, b)).toReal ‚àÇ(Œ∑ a))
      =·µê[ŒΩ] fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇ(Œ∑ a) := by
  filter_upwards [f_compProd_congr Œº ŒΩ Œ∫ Œ∑] with a ha using integral_congr_ae ha

lemma integral_f_compProd_right_congr (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒº ‚äó‚Çò Œ∑) (a, b)).toReal ‚àÇ(Œ∑ a))
      =·µê[Œº] fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇ(Œ∑ a) := by
  filter_upwards [integral_f_compProd_congr Œº Œº Œ∫ Œ∑, Measure.rnDeriv_self Œº] with a ha h_eq_one
  rw [ha]
  simp_rw [h_eq_one, one_mul]

lemma integral_f_compProd_left_congr (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫]  :
    (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∫) (a, b)).toReal ‚àÇ(Œ∫ a))
      =·µê[ŒΩ] fun a ‚Ü¶ (Œ∫ a Set.univ).toReal * f ((‚àÇŒº/‚àÇŒΩ) a).toReal := by
  filter_upwards [integral_f_compProd_congr (f := f) Œº ŒΩ Œ∫ Œ∫] with a ha
  have h_one := (Œ∫ a).rnDeriv_self
  rw [ha, ‚Üê smul_eq_mul,  ‚Üê integral_const]
  refine integral_congr_ae ?_
  filter_upwards [h_one] with b hb
  simp [hb]

lemma integrable_f_rnDeriv_of_integrable_compProd [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫]
    [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (hf_int : Integrable (fun x ‚Ü¶ f ((Œº ‚äó‚Çò Œ∫).rnDeriv (Œº ‚äó‚Çò Œ∑) x).toReal) (Œº ‚äó‚Çò Œ∑)) :
    ‚àÄ·µê a ‚àÇŒº, Integrable (fun x ‚Ü¶ f ((Œ∫ a).rnDeriv (Œ∑ a) x).toReal) (Œ∑ a) := by
  have h := hf_int.integral_compProd'
  rw [Measure.integrable_compProd_iff] at hf_int
  swap
  ¬∑ exact (hf.comp_measurable (Measure.measurable_rnDeriv _ _).ennreal_toReal).aestronglyMeasurable
  have h := kernel.rnDeriv_measure_compProd_right' Œº Œ∫ Œ∑
  filter_upwards [h, hf_int.1] with a ha1 ha2
  refine (integrable_congr ?_).mp ha2
  filter_upwards [ha1] with b hb
  rw [hb]

lemma integrable_f_rnDeriv_compProd_iff [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    Integrable (fun x ‚Ü¶ f ((Œº ‚äó‚Çò Œ∫).rnDeriv (ŒΩ ‚äó‚Çò Œ∑) x).toReal) (ŒΩ ‚äó‚Çò Œ∑)
      ‚Üî (‚àÄ·µê a ‚àÇŒΩ, Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) x).toReal) (Œ∑ a))
        ‚àß Integrable (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇ(Œ∑ a)) ŒΩ := by
  have h_ae_eq : ‚àÄ·µê a ‚àÇŒΩ, (fun y ‚Ü¶ f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) (a, y)).toReal)
      =·µê[Œ∑ a] fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) x).toReal := f_compProd_congr Œº ŒΩ Œ∫ Œ∑
  refine ‚ü®fun h ‚Ü¶ ?_, fun ‚ü®h1, h2‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ have h_int := h.integral_compProd'
    rw [Measure.integrable_compProd_iff] at h
    swap
    ¬∑ exact (hf.comp_measurable
        (Measure.measurable_rnDeriv _ _).ennreal_toReal).aestronglyMeasurable
    constructor
    ¬∑ filter_upwards [h.1, h_ae_eq] with a ha1 ha2
      exact (integrable_congr ha2).mp ha1
    ¬∑ refine (integrable_congr ?_).mp h_int
      filter_upwards [h_ae_eq] with a ha
      exact integral_congr_ae ha
  ¬∑ rw [Measure.integrable_compProd_iff]
    swap
    ¬∑ exact (hf.comp_measurable
        (Measure.measurable_rnDeriv _ _).ennreal_toReal).aestronglyMeasurable
    constructor
    ¬∑ filter_upwards [h1, h_ae_eq] with a ha1 ha2
      exact (integrable_congr ha2).mpr ha1
    ¬∑ rw [‚Üê integrable_congr (integral_f_compProd_congr Œº ŒΩ Œ∫ Œ∑)] at h2
      -- todo: cut into two parts, depending on sign of f.
      -- on the positive part, use h2.
      -- on the negative part, use `f x ‚â• a * x + b` by convexity, then since both measures are
      -- finite the integral is finite.
      sorry

lemma fDiv_compProd_ne_top_iff [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
  fDiv f (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∑) ‚â† ‚ä§ ‚Üî
    (‚àÄ·µê a ‚àÇŒΩ, Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) x).toReal) (Œ∑ a))
      ‚àß Integrable (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇ(Œ∑ a)) ŒΩ
      ‚àß (derivAtTop f = ‚ä§ ‚Üí Œº ‚â™ ŒΩ ‚àß ‚àÄ·µê a ‚àÇŒº, Œ∫ a ‚â™ Œ∑ a) := by
  rw [fDiv_ne_top_iff, integrable_f_rnDeriv_compProd_iff hf h_cvx,
    kernel.Measure.absolutelyContinuous_compProd_iff, and_assoc]

lemma fDiv_compProd_eq_top_iff [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    fDiv f (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∑) = ‚ä§ ‚Üî
    (‚àÄ·µê a ‚àÇŒΩ, Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) x).toReal) (Œ∑ a)) ‚Üí
      Integrable (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇŒ∑ a) ŒΩ ‚Üí
      derivAtTop f = ‚ä§ ‚àß (Œº ‚â™ ŒΩ ‚Üí ¬¨‚àÄ·µê a ‚àÇŒº, Œ∫ a ‚â™ Œ∑ a) := by
  rw [‚Üê not_iff_not, ‚Üê ne_eq, fDiv_compProd_ne_top_iff hf h_cvx]
  push_neg
  rfl

lemma fDiv_compProd_right_ne_top_iff [IsFiniteMeasure Œº]
    [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
  fDiv f (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑) ‚â† ‚ä§ ‚Üî
    (‚àÄ·µê a ‚àÇŒº, Integrable (fun x ‚Ü¶ f ((‚àÇŒ∫ a/‚àÇŒ∑ a) x).toReal) (Œ∑ a))
      ‚àß Integrable (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇ(Œ∑ a)) Œº
      ‚àß (derivAtTop f = ‚ä§ ‚Üí ‚àÄ·µê a ‚àÇŒº, Œ∫ a ‚â™ Œ∑ a) := by
  rw [fDiv_compProd_ne_top_iff hf h_cvx]
  have h_self := Œº.rnDeriv_self
  refine ‚ü®fun h ‚Ü¶ ‚ü®?_, ?_, ?_‚ü©, fun h ‚Ü¶ ‚ü®?_, ?_, ?_‚ü©‚ü©
  ¬∑ filter_upwards [h_self, h.1] with a ha1 ha2
    simp_rw [ha1, one_mul] at ha2
    exact ha2
  ¬∑ refine (integrable_congr ?_).mp h.2.1
    filter_upwards [h_self] with a ha1
    simp_rw [ha1, one_mul]
  ¬∑ simp only [Measure.AbsolutelyContinuous.rfl, true_and] at h
    exact h.2.2
  ¬∑ filter_upwards [h_self, h.1] with a ha1 ha2
    simp_rw [ha1, one_mul]
    exact ha2
  ¬∑ refine (integrable_congr ?_).mp h.2.1
    filter_upwards [h_self] with a ha1
    simp_rw [ha1, one_mul]
  ¬∑ simp only [Measure.AbsolutelyContinuous.rfl, true_and]
    exact h.2.2

lemma fDiv_compProd_right_eq_top_iff [IsFiniteMeasure Œº]
    [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    fDiv f (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑) = ‚ä§ ‚Üî
    (‚àÄ·µê a ‚àÇŒº, Integrable (fun x ‚Ü¶ f ((‚àÇŒ∫ a/‚àÇŒ∑ a) x).toReal) (Œ∑ a)) ‚Üí
      Integrable (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇŒ∑ a) Œº ‚Üí
      derivAtTop f = ‚ä§ ‚àß ¬¨‚àÄ·µê a ‚àÇŒº, Œ∫ a ‚â™ Œ∑ a := by
  rw [‚Üê not_iff_not, ‚Üê ne_eq, fDiv_compProd_right_ne_top_iff hf h_cvx]
  push_neg
  rfl

lemma fDiv_compProd_left_ne_top_iff [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    [IsMarkovKernel Œ∫] (hf : StronglyMeasurable f) (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
  fDiv f (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∫) ‚â† ‚ä§ ‚Üî
    Integrable (fun a ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a).toReal) ŒΩ ‚àß (derivAtTop f = ‚ä§ ‚Üí Œº ‚â™ ŒΩ) := by
  rw [fDiv_compProd_ne_top_iff hf h_cvx]
  have h_one : ‚àÄ a, ‚àÇ(Œ∫ a)/‚àÇ(Œ∫ a) =·µê[Œ∫ a] 1 := fun a ‚Ü¶ Measure.rnDeriv_self (Œ∫ a)
  simp only [ENNReal.toReal_mul, Measure.AbsolutelyContinuous.rfl, eventually_true, and_true]
  have : ‚àÄ a, ‚à´ b, f (((‚àÇŒº/‚àÇŒΩ) a).toReal * ((‚àÇŒ∫ a/‚àÇŒ∫ a) b).toReal) ‚àÇŒ∫ a
        = ‚à´ _, f (((‚àÇŒº/‚àÇŒΩ) a).toReal) ‚àÇŒ∫ a := by
      refine fun a ‚Ü¶ integral_congr_ae ?_
      filter_upwards [h_one a] with b hb
      simp [hb]
  refine ‚ü®fun ‚ü®_, h2, h3‚ü© ‚Ü¶ ‚ü®?_, h3‚ü©, fun ‚ü®h1, h2‚ü© ‚Ü¶ ‚ü®?_, ?_, h2‚ü©‚ü©
  ¬∑ refine (integrable_congr ?_).mpr h2
    refine ae_of_all _ (fun a ‚Ü¶ ?_)
    simp only
    simp [this]
  ¬∑ refine ae_of_all _ (fun a ‚Ü¶ ?_)
    have : (fun x ‚Ü¶ f (((‚àÇŒº/‚àÇŒΩ) a).toReal * ((‚àÇŒ∫ a/‚àÇŒ∫ a) x).toReal))
        =·µê[Œ∫ a] (fun _ ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a).toReal) := by
      filter_upwards [h_one a] with b hb
      simp [hb]
    rw [integrable_congr this]
    simp
  ¬∑ simp only [this, integral_const, measure_univ, ENNReal.one_toReal, smul_eq_mul, one_mul]
    exact h1

lemma fDiv_compProd_left_eq_top_iff [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    [IsMarkovKernel Œ∫] (hf : StronglyMeasurable f) (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
  fDiv f (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∫) = ‚ä§ ‚Üî
    Integrable (fun a ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a).toReal) ŒΩ ‚Üí (derivAtTop f = ‚ä§ ‚àß ¬¨ Œº ‚â™ ŒΩ) := by
  rw [‚Üê not_iff_not, ‚Üê ne_eq, fDiv_compProd_left_ne_top_iff hf h_cvx]
  push_neg
  rfl

lemma integrable_singularPart [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] :
    Integrable (fun x ‚Ü¶ ((Œ∫ x).singularPart (Œ∑ x) Set.univ).toReal) Œº := by
  refine integrable_toReal_of_lintegral_ne_top ?_ (ne_of_lt ?_)
  ¬∑ simp_rw [‚Üê kernel.singularPart_eq_singularPart_measure]
    exact (kernel.measurable_coe _ MeasurableSet.univ).aemeasurable
  calc ‚à´‚Åª x, (Œ∫ x).singularPart (Œ∑ x) Set.univ ‚àÇŒº
  _ ‚â§ ‚à´‚Åª x, Œ∫ x Set.univ ‚àÇŒº := by
        refine lintegral_mono (fun x ‚Ü¶ ?_)
        exact Measure.singularPart_le _ _ _
  _ = (Œº ‚äó‚Çò Œ∫) Set.univ := by
        rw [‚Üê Set.univ_prod_univ, Measure.compProd_apply_prod MeasurableSet.univ MeasurableSet.univ,
          set_lintegral_univ]
  _ < ‚ä§ := measure_lt_top _ _

lemma integrable_fDiv_iff [IsFiniteMeasure Œº] [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑]
    (h_fin : ‚àÄ·µê a ‚àÇŒº, fDiv f (Œ∫ a) (Œ∑ a) ‚â† ‚ä§) :
    Integrable (fun x ‚Ü¶ EReal.toReal (fDiv f (Œ∫ x) (Œ∑ x))) Œº
      ‚Üî Integrable (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇŒ∑ a) Œº := by
  by_cases h_top : derivAtTop f = ‚ä§
  ¬∑ classical
    simp_rw [fDiv_of_derivAtTop_eq_top h_top]
    simp only [fDiv_ne_top_iff, h_top, forall_true_left] at h_fin
    refine integrable_congr ?_
    filter_upwards [h_fin] with a ha
    rw [if_pos ha, EReal.toReal_coe]
  ¬∑ have h_fin' := h_fin
    simp_rw [fDiv_ne_top_iff_of_derivAtTop_ne_top h_top] at h_fin
    have : (fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal)
        =·µê[Œº] (fun x ‚Ü¶ ‚à´ y, f ((‚àÇŒ∫ x/‚àÇŒ∑ x) y).toReal ‚àÇ(Œ∑ x)
          + (derivAtTop f).toReal * ((Œ∫ x).singularPart (Œ∑ x) Set.univ).toReal) := by
      filter_upwards [h_fin'] with x hx1
      rw [fDiv_of_ne_top hx1, EReal.toReal_add]
      ¬∑ simp only [EReal.toReal_coe, add_right_inj]
        rw [EReal.toReal_mul]
        simp
      ¬∑ simp
      ¬∑ simp
      ¬∑ simp [h_top, EReal.mul_eq_top, derivAtTop_ne_bot, measure_ne_top]
      ¬∑ simp [EReal.mul_eq_bot, derivAtTop_ne_bot, h_top, measure_ne_top]
    rw [integrable_congr this]
    have h_int : Integrable (fun x ‚Ü¶ (derivAtTop f).toReal
        * ((Œ∫ x).singularPart (Œ∑ x) Set.univ).toReal) Œº := by
      refine Integrable.const_mul ?_ (derivAtTop f).toReal
      exact integrable_singularPart
    refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ h.add h_int‚ü©
    have : (fun x ‚Ü¶ ‚à´ y, f ((‚àÇŒ∫ x/‚àÇŒ∑ x) y).toReal ‚àÇŒ∑ x)
        = (fun x ‚Ü¶ (‚à´ y, f ((‚àÇŒ∫ x/‚àÇŒ∑ x) y).toReal ‚àÇŒ∑ x +
          (derivAtTop f).toReal * ((Œ∫ x).singularPart (Œ∑ x) Set.univ).toReal)
          - (derivAtTop f).toReal * ((Œ∫ x).singularPart (Œ∑ x) Set.univ).toReal) := by
      ext; simp
    rw [this]
    exact h.sub h_int

lemma condFDivReal_ne_top_iff [IsFiniteMeasure Œº] [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] :
  condFDivReal f Œ∫ Œ∑ Œº ‚â† ‚ä§ ‚Üî
    (‚àÄ·µê a ‚àÇŒº, Integrable (fun x ‚Ü¶ f ((‚àÇŒ∫ a/‚àÇŒ∑ a) x).toReal) (Œ∑ a))
      ‚àß Integrable (fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒ∫ a/‚àÇŒ∑ a) b).toReal ‚àÇ(Œ∑ a)) Œº
      ‚àß (derivAtTop f = ‚ä§ ‚Üí ‚àÄ·µê a ‚àÇŒº, Œ∫ a ‚â™ Œ∑ a) := by
  rw [condFDivReal]
  split_ifs with h
  ¬∑ have h' := h
    simp_rw [fDiv_ne_top_iff] at h
    simp only [ne_eq, EReal.coe_ne_top, not_false_eq_true, true_iff]
    refine ‚ü®?_, ?_, ?_‚ü©
    ¬∑ filter_upwards [h.1] with a ha
      exact ha.1
    ¬∑ have h_int := h.2
      rwa [integrable_fDiv_iff h'.1] at h_int
    ¬∑ intro h_top
      filter_upwards [h.1] with a ha
      exact ha.2 h_top
  ¬∑ simp only [ne_eq, not_true_eq_false, false_iff, not_and, not_forall, not_eventually,
      exists_prop]
    push_neg at h
    intro hf_int h_int
    simp_rw [fDiv_ne_top_iff] at h
    by_contra h_contra
    simp only [not_and, not_frequently, not_not] at h_contra
    rw [eventually_and] at h
    simp only [hf_int, eventually_all, true_and] at h
    specialize h h_contra
    have h_top : ‚àÄ·µê a ‚àÇŒº, fDiv f (Œ∫ a) (Œ∑ a) ‚â† ‚ä§ := by
      simp only [ne_eq, fDiv_ne_top_iff, eventually_and, eventually_all]
      exact ‚ü®hf_int, h_contra‚ü©
    rw [integrable_fDiv_iff h_top] at h
    exact h h_int

lemma condFDivReal_ne_top_iff_fDiv_compProd_ne_top [IsFiniteMeasure Œº]
    [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    condFDivReal f Œ∫ Œ∑ Œº ‚â† ‚ä§ ‚Üî fDiv f (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑) ‚â† ‚ä§ := by
  rw [condFDivReal_ne_top_iff, fDiv_compProd_right_ne_top_iff hf h_cvx]

lemma condFDivReal_eq_top_iff_fDiv_compProd_eq_top [IsFiniteMeasure Œº]
    [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    condFDivReal f Œ∫ Œ∑ Œº = ‚ä§ ‚Üî fDiv f (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑) = ‚ä§ := by
  rw [‚Üê not_iff_not]
  exact condFDivReal_ne_top_iff_fDiv_compProd_ne_top hf h_cvx

lemma condFDivReal_eq_add [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] (hf_ae : ‚àÄ·µê a ‚àÇŒº, fDiv f (Œ∫ a) (Œ∑ a) ‚â† ‚ä§)
    (hf : Integrable (fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal) Œº) :
    condFDivReal f Œ∫ Œ∑ Œº = (Œº[fun a ‚Ü¶ ‚à´ y, f ((‚àÇŒ∫ a/‚àÇŒ∑ a) y).toReal ‚àÇŒ∑ a] : ‚Ñù)
      + (derivAtTop f).toReal * (Œº[fun a ‚Ü¶ ((Œ∫ a).singularPart (Œ∑ a) Set.univ).toReal] : ‚Ñù) := by
  rw [condFDivReal_eq hf_ae hf]
  have : (fun x ‚Ü¶ EReal.toReal (fDiv f (Œ∫ x) (Œ∑ x)))
      =·µê[Œº] fun x ‚Ü¶ ‚à´ y, f ((‚àÇ(Œ∫ x)/‚àÇ(Œ∑ x)) y).toReal ‚àÇ(Œ∑ x)
        + (derivAtTop f * (Œ∫ x).singularPart (Œ∑ x) Set.univ).toReal := by
    filter_upwards [hf_ae] with x hx
    rw [fDiv_of_ne_top hx, EReal.toReal_add]
    rotate_left
    ¬∑ simp
    ¬∑ simp
    ¬∑ simp only [ne_eq, EReal.mul_eq_top, derivAtTop_ne_bot, false_and, EReal.coe_ennreal_ne_bot,
        and_false, EReal.coe_ennreal_pos, Measure.measure_univ_pos, EReal.coe_ennreal_eq_top_iff,
        measure_ne_top, or_false, false_or, not_and, not_not]
      intro h_top
      rw [fDiv_ne_top_iff] at hx
      simp [h_top, Measure.singularPart_eq_zero_of_ac (hx.2 h_top)]
    ¬∑ simp only [ne_eq, EReal.mul_eq_bot, derivAtTop_ne_bot, EReal.coe_ennreal_pos,
        Measure.measure_univ_pos, false_and, EReal.coe_ennreal_ne_bot, and_false,
        EReal.coe_ennreal_eq_top_iff, measure_ne_top, or_false, false_or, not_and, not_lt]
      exact fun _ ‚Ü¶ EReal.coe_ennreal_nonneg _
    rfl
  rw [integral_congr_ae this]
  rw [integral_add]
  rotate_left
  ¬∑ rwa [integrable_fDiv_iff hf_ae] at hf
  ¬∑ simp_rw [EReal.toReal_mul]
    convert (integrable_singularPart (Œ∫ := Œ∫) (Œ∑ := Œ∑) (Œº := Œº)).const_mul (derivAtTop f).toReal
    rw [‚Üê EReal.coe_ennreal_toReal, EReal.toReal_coe]
    exact measure_ne_top _ _
  simp only [EReal.coe_add, EReal.toReal_mul]
  rw [integral_mul_left]
  simp only [_root_.EReal.toReal_coe_ennreal, EReal.coe_mul]

lemma condFDivReal_of_derivAtTop_eq_top [IsFiniteMeasure Œº]
    [IsFiniteKernel Œ∫] [IsFiniteKernel Œ∑] (hf_ae : ‚àÄ·µê a ‚àÇŒº, fDiv f (Œ∫ a) (Œ∑ a) ‚â† ‚ä§)
    (hf : Integrable (fun x ‚Ü¶ (fDiv f (Œ∫ x) (Œ∑ x)).toReal) Œº) (h_top : derivAtTop f = ‚ä§):
    condFDivReal f Œ∫ Œ∑ Œº = (Œº[fun a ‚Ü¶ ‚à´ y, f ((‚àÇŒ∫ a/‚àÇŒ∑ a) y).toReal ‚àÇŒ∑ a] : ‚Ñù) := by
  rw [condFDivReal_eq_add hf_ae hf]
  simp [h_top]

end Integrable

lemma fDiv_compProd_left (Œº : Measure Œ±) [IsFiniteMeasure Œº]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsMarkovKernel Œ∫] [IsFiniteKernel Œ∑] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    fDiv f (Œº ‚äó‚Çò Œ∫) (Œº ‚äó‚Çò Œ∑) = condFDivReal f Œ∫ Œ∑ Œº := by
  by_cases hf_top : condFDivReal f Œ∫ Œ∑ Œº = ‚ä§
  ¬∑ rwa [hf_top, ‚Üê condFDivReal_eq_top_iff_fDiv_compProd_eq_top hf h_cvx]
  have hf_top' := hf_top
  have hf_top'' := hf_top
  have hf_top''' := hf_top
  rw [‚Üê ne_eq, condFDivReal_ne_top_iff] at hf_top'
  rw [condFDivReal_eq_top_iff_fDiv_compProd_eq_top hf h_cvx, ‚Üê ne_eq, fDiv_ne_top_iff]
    at hf_top''
  rw [condFDivReal_eq_top_iff_fDiv_compProd_eq_top hf h_cvx] at hf_top'''
  rcases hf_top' with ‚ü®h1, h2, h3‚ü©
  rcases hf_top'' with ‚ü®h4, h5‚ü©
  classical
  by_cases h_deriv : derivAtTop f = ‚ä§
  ¬∑ rw [fDiv_of_derivAtTop_eq_top h_deriv, if_pos ‚ü®h4, h5 h_deriv‚ü©,
      condFDivReal_of_derivAtTop_eq_top _ _ h_deriv]
    sorry
    sorry
    sorry
  ¬∑ rw [fDiv_of_ne_top, condFDivReal_eq_add]
    rotate_left
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ exact hf_top'''
    congr
    ¬∑ sorry
    ¬∑ rw [EReal.coe_toReal h_deriv derivAtTop_ne_bot]
    ¬∑ -- extract lemma
      sorry

end Conditional

lemma fDiv_compProd_right [MeasurableSpace.CountablyGenerated Œ≤]
    (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ : kernel Œ± Œ≤) [IsMarkovKernel Œ∫] (hf : StronglyMeasurable f)
    (h_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) :
    fDiv f (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∫) = fDiv f Œº ŒΩ := by
  by_cases h_top : fDiv f (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∫) = ‚ä§
  ¬∑ symm
    rw [h_top, fDiv_eq_top_iff]
    have h_top' := (fDiv_compProd_left_eq_top_iff hf h_cvx).mp h_top
    by_cases h : Integrable (fun a ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a).toReal) ŒΩ
    ¬∑ exact Or.inr (h_top' h)
    ¬∑ exact Or.inl h
  ¬∑ have h_top' := (fDiv_compProd_left_ne_top_iff hf h_cvx).mp h_top
    have h_top'' : fDiv f Œº ŒΩ ‚â† ‚ä§ := by rwa [fDiv_ne_top_iff]
    rw [fDiv_of_ne_top h_top, fDiv_of_ne_top h_top'']
    have h := integral_f_compProd_left_congr Œº ŒΩ Œ∫ (f := f)
    simp only [measure_univ, ENNReal.one_toReal, one_mul] at h
    rw [integral_congr_ae h.symm, Measure.integral_compProd]
    ¬∑ congr
      sorry  -- extract lemma
    ¬∑ sorry

lemma f_rnDeriv_ae_le_integral [MeasurableSpace.CountablyGenerated Œ≤]
    (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsFiniteKernel Œ∫] [IsMarkovKernel Œ∑]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hf_cont : ContinuousOn f (Set.Ici 0))
    (h_int : Integrable (fun p ‚Ü¶ f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) p).toReal) (ŒΩ ‚äó‚Çò Œ∑))
    (hŒ∫Œ∑ : ‚àÄ·µê a ‚àÇŒΩ, Œ∫ a ‚â™ Œ∑ a) :
    (fun a ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) a * Œ∫ a Set.univ).toReal)
      ‚â§·µê[ŒΩ] fun a ‚Ü¶ ‚à´ b, f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) (a, b)).toReal ‚àÇ(Œ∑ a) := by
  have h_compProd := kernel.rnDeriv_measure_compProd' Œº ŒΩ Œ∫ Œ∑
  have h_lt_top := Measure.ae_ae_of_ae_compProd <| Measure.rnDeriv_lt_top (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∑)
  have := Measure.integrable_toReal_rnDeriv (Œº := Œº ‚äó‚Çò Œ∫) (ŒΩ := ŒΩ ‚äó‚Çò Œ∑)
  rw [Measure.integrable_compProd_iff] at this
  swap
  ¬∑ refine (Measurable.stronglyMeasurable ?_).aestronglyMeasurable
    exact (Measure.measurable_rnDeriv _ _).ennreal_toReal
  filter_upwards [hŒ∫Œ∑, h_compProd, h_lt_top, h_int.compProd_mk_left_ae', this.1]
    with a h_ac h_eq h_lt_top h_int' h_rnDeriv_int
  calc f ((‚àÇŒº/‚àÇŒΩ) a * Œ∫ a Set.univ).toReal
    = f ((‚àÇŒº/‚àÇŒΩ) a * ‚à´‚Åª b, (‚àÇŒ∫ a/‚àÇŒ∑ a) b ‚àÇŒ∑ a).toReal := by rw [Measure.lintegral_rnDeriv h_ac]
  _ = f (‚à´‚Åª b,(‚àÇŒº/‚àÇŒΩ) a * (‚àÇŒ∫ a/‚àÇŒ∑ a) b ‚àÇŒ∑ a).toReal := by
        rw [lintegral_const_mul _ (Measure.measurable_rnDeriv _ _)]
  _ = f (‚à´‚Åª b, (‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) (a, b) ‚àÇŒ∑ a).toReal := by rw [lintegral_congr_ae h_eq]
  _ = f (‚à´ b, ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) (a, b)).toReal ‚àÇŒ∑ a) := by
        rw [integral_toReal _ h_lt_top]
        exact ((Measure.measurable_rnDeriv _ _).comp measurable_prod_mk_left).aemeasurable
  _ ‚â§ ‚à´ b, f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) (a, b)).toReal ‚àÇŒ∑ a := by
        rw [‚Üê average_eq_integral, ‚Üê average_eq_integral]
        exact ConvexOn.map_average_le hf_cvx hf_cont isClosed_Ici (by simp) h_rnDeriv_int h_int'

lemma le_fDiv_compProd [MeasurableSpace.CountablyGenerated Œ≤]
    (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure Œº] [IsFiniteMeasure ŒΩ]
    (Œ∫ Œ∑ : kernel Œ± Œ≤) [IsMarkovKernel Œ∫] [IsMarkovKernel Œ∑]
    (hf_cvx : ConvexOn ‚Ñù (Set.Ici 0) f) (hf_cont : ContinuousOn f (Set.Ici 0))
    (h_int : Integrable (fun p ‚Ü¶ f ((‚àÇŒº ‚äó‚Çò Œ∫/‚àÇŒΩ ‚äó‚Çò Œ∑) p).toReal) (ŒΩ ‚äó‚Çò Œ∑))
    (h_int_meas : Integrable (fun x ‚Ü¶ f ((‚àÇŒº/‚àÇŒΩ) x).toReal) ŒΩ) :
    fDiv f Œº ŒΩ ‚â§ fDiv f (Œº ‚äó‚Çò Œ∫) (ŒΩ ‚äó‚Çò Œ∑) := by
  let Œ∫' := kernel.withDensity Œ∑ (kernel.rnDeriv Œ∫ Œ∑)
  have h : ‚àÄ a, f ((‚àÇŒº/‚àÇŒΩ) a).toReal
      ‚â§ f ((‚àÇŒº/‚àÇŒΩ) a * Œ∫' a Set.univ).toReal
        + (derivAtTop f).toReal * ((‚àÇŒº/‚àÇŒΩ) a).toReal
          * (kernel.singularPart Œ∫ Œ∑ a Set.univ).toReal := by
    sorry
  sorry

end ProbabilityTheory
