import Mathlib.Topology.Order.Basic

open Set Filter Topology

-- Put this in Mathlib, replacing `Monotone.tendsto_nhdsWithin_Iio`

lemma MonotoneOn.tendsto_nhdsWithin_Ioo_left {Œ± Œ≤ : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} {x y : Œ±} (h_nonempty : (Ioo y x).Nonempty) (Mf : MonotoneOn f (Ioo y x))
    (h_bdd : BddAbove (f '' Ioo y x)) :
    Tendsto f (ùìù[<] x) (ùìù (sSup (f '' Ioo y x))) := by
  refine tendsto_order.2 ‚ü®fun l hl => ?_, fun m hm => ?_‚ü©
  ¬∑ obtain ‚ü®z, ‚ü®yz, zx‚ü©, lz‚ü© : ‚àÉ a : Œ±, a ‚àà Ioo y x ‚àß l < f a := by
      simpa only [mem_image, exists_prop, exists_exists_and_eq_and] using
        exists_lt_of_lt_csSup (h_nonempty.image _) hl
    refine mem_of_superset (Ioo_mem_nhdsWithin_Iio' zx) fun w hw => ?_
    exact lz.trans_le <| Mf ‚ü®yz, zx‚ü© ‚ü®yz.trans_le hw.1.le, hw.2‚ü© hw.1.le
  ¬∑ rcases h_nonempty with ‚ü®_, hy, hx‚ü©
    refine mem_of_superset (Ioo_mem_nhdsWithin_Iio' (hy.trans hx)) fun w hw => lt_of_le_of_lt ?_ hm
    exact le_csSup h_bdd (mem_image_of_mem _ hw)

lemma MonotoneOn.tendsto_nhdsWithin_Ioo_right {Œ± Œ≤ : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} {x y : Œ±} (h_nonempty : (Ioo x y).Nonempty) (Mf : MonotoneOn f (Ioo x y))
    (h_bdd : BddBelow (f '' Ioo x y)) :
    Tendsto f (ùìù[>] x) (ùìù (sInf (f '' Ioo x y))) := by
  refine tendsto_order.2 ‚ü®fun l hl => ?_, fun m hm => ?_‚ü©
  ¬∑ rcases h_nonempty with ‚ü®p, hy, hx‚ü©
    refine mem_of_superset (Ioo_mem_nhdsWithin_Ioi' (hy.trans hx)) fun w hw => hl.trans_le ?_
    exact csInf_le h_bdd (mem_image_of_mem _ hw)
  ¬∑ obtain ‚ü®z, ‚ü®xz, zy‚ü©, zm‚ü© : ‚àÉ a : Œ±, a ‚àà Ioo x y ‚àß f a < m := by
      simpa [mem_image, exists_prop, exists_exists_and_eq_and] using
        exists_lt_of_csInf_lt (h_nonempty.image _) hm
    refine mem_of_superset (Ioo_mem_nhdsWithin_Ioi' xz) fun w hw => ?_
    exact (Mf ‚ü®hw.1, hw.2.trans zy‚ü© ‚ü®xz, zy‚ü© hw.2.le).trans_lt zm

-- attempt at proving the right version passing through the left one, it compiles but it seems more complicated than just adapting the other proof
-- lemma MonotoneOn.tendsto_nhdsWithin_Ioo_right' {Œ± Œ≤ : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
--     [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
--     {f : Œ± ‚Üí Œ≤} {x y : Œ±} (h_nonempty : (Ioo x y).Nonempty) (Mf : MonotoneOn f (Ioo x y))
--     (h_bdd : BddBelow (f '' Ioo x y)) :
--     Tendsto f (ùìù[>] x) (ùìù (sInf (f '' Ioo x y))) := by
--   set Ioo' := OrderDual.ofDual ‚Åª¬π' Set.Ioo x y with Ioo'_def
--   rw [‚Üê Set.dual_Ioo] at Ioo'_def
--   have Mf' : MonotoneOn (‚áëOrderDual.toDual ‚àò f ‚àò ‚áëOrderDual.ofDual) Ioo' := Mf.dual
--   rw [Ioo'_def] at Mf'
--   convert MonotoneOn.tendsto_nhdsWithin_Ioo_left (Œ± := Œ±·µí·µà) (Œ≤ := Œ≤·µí·µà) ?_ Mf' ?_ using 1
--   ¬∑ simp_rw [image_comp, dual_Ioo, Equiv.image_preimage,
--       show OrderDual.toDual '' (f '' Ioo x y) = OrderDual.ofDual ‚Åª¬π' (f '' Ioo x y) from
--       (OrderDual.toDual.eq_preimage_iff_image_eq _ _).mp rfl]
--     rfl
--   ¬∑ simpa only [dual_Ioo]
--   ¬∑ rwa [‚Üê bddBelow_preimage_toDual, image_comp, Equiv.preimage_image, Set.dual_Ioo, image_comp,
--       Equiv.image_preimage]

lemma MonotoneOn.tendsto_nhdsWithin_Iio {Œ± Œ≤ : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} {x : Œ±} (Mf : MonotoneOn f (Iio x)) (h_bdd : BddAbove (f '' Iio x)) :
    Tendsto f (ùìù[<] x) (ùìù (sSup (f '' Iio x))) := by
  rcases eq_empty_or_nonempty (Iio x) with (h | h); ¬∑ simp [h]
  refine tendsto_order.2 ‚ü®fun l hl => ?_, fun m hm => ?_‚ü©
  ¬∑ obtain ‚ü®z, zx, lz‚ü© : ‚àÉ a : Œ±, a < x ‚àß l < f a := by
      simpa only [mem_image, exists_prop, exists_exists_and_eq_and] using
        exists_lt_of_lt_csSup (h.image _) hl
    exact mem_of_superset (Ioo_mem_nhdsWithin_Iio' zx) fun y hy => lz.trans_le (Mf zx hy.2 hy.1.le)
  ¬∑ refine mem_of_superset self_mem_nhdsWithin fun y hy => lt_of_le_of_lt ?_ hm
    exact le_csSup h_bdd (mem_image_of_mem _ hy)

lemma MonotoneOn.tendsto_nhdsWithin_Ioi {Œ± Œ≤ : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} {x : Œ±} (Mf : MonotoneOn f (Ioi x)) (h_bdd : BddBelow (f '' Ioi x)) :
    Tendsto f (ùìù[>] x) (ùìù (sInf (f '' Ioi x))) := by
  rcases eq_empty_or_nonempty (Ioi x) with (h | h); ¬∑ simp [h]
  refine tendsto_order.2 ‚ü®fun l hl => ?_, fun m hm => ?_‚ü©
  ¬∑ refine mem_of_superset self_mem_nhdsWithin fun y hy => hl.trans_le ?_
    exact csInf_le h_bdd (mem_image_of_mem _ hy)
  ¬∑ obtain ‚ü®z, xz, zm‚ü© : ‚àÉ a : Œ±, x < a ‚àß f a < m := by
      simpa only [mem_image, exists_prop, exists_exists_and_eq_and] using
        exists_lt_of_csInf_lt (h.image _) hm
    exact mem_of_superset (Ioo_mem_nhdsWithin_Ioi' xz) fun y hy => (Mf hy.1 xz hy.2.le).trans_lt zm

--this is already in mathlib, this is just an alternative proof using the more general version, if we substitute it remove the prime (') at the end of the name
/-- A monotone map has a limit to the left of any point `x`, equal to `sSup (f '' (Iio x))`. -/
theorem Monotone.tendsto_nhdsWithin_Iio' {Œ± Œ≤ : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} (Mf : Monotone f) (x : Œ±) : Tendsto f (ùìù[<] x) (ùìù (sSup (f '' Iio x))) :=
  MonotoneOn.tendsto_nhdsWithin_Iio (Mf.monotoneOn _) (Mf.map_bddAbove bddAbove_Iio)


/-- A monotone map has a limit to the right of any point `x`, equal to `sInf (f '' (Ioi x))`. -/
theorem Monotone.tendsto_nhdsWithin_Ioi' {Œ± Œ≤ : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} (Mf : Monotone f) (x : Œ±) : Tendsto f (ùìù[>] x) (ùìù (sInf (f '' Ioi x))) :=
  Monotone.tendsto_nhdsWithin_Iio' (Œ± := Œ±·µí·µà) (Œ≤ := Œ≤·µí·µà) Mf.dual x
